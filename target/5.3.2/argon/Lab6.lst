
/Users/ashleylibasci/IoTFolderLabs/Lab6/target/5.3.2/argon/Lab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003fa8  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b7fc8  000b7fc8  00007fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         0000006c  2003e5d0  000b7fec  0000e5d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001b4  2003e63c  2003e63c  0001e63c  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b8058  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b805c  000b805c  0001805c  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b8062  000b8062  00018062  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b8086  000b8086  00018086  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   0012bc55  00000000  00000000  0001808a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0001429b  00000000  00000000  00143cdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00040cf9  00000000  00000000  00157f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002e20  00000000  00000000  00198c73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000a9b8  00000000  00000000  0019ba93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003e707  00000000  00000000  001a644b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00049a97  00000000  00000000  001e4b52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013c898  00000000  00000000  0022e5e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000087cc  00000000  00000000  0036ae84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_dcmpun>:
   b48cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b48d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48d4:	d102      	bne.n	b48dc <__aeabi_dcmpun+0x10>
   b48d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b48da:	d10a      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b48e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48e4:	d102      	bne.n	b48ec <__aeabi_dcmpun+0x20>
   b48e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b48ea:	d102      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48ec:	f04f 0000 	mov.w	r0, #0
   b48f0:	4770      	bx	lr
   b48f2:	f04f 0001 	mov.w	r0, #1
   b48f6:	4770      	bx	lr

000b48f8 <__aeabi_d2iz>:
   b48f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b48fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4900:	d215      	bcs.n	b492e <__aeabi_d2iz+0x36>
   b4902:	d511      	bpl.n	b4928 <__aeabi_d2iz+0x30>
   b4904:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4908:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b490c:	d912      	bls.n	b4934 <__aeabi_d2iz+0x3c>
   b490e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4916:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b491a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b491e:	fa23 f002 	lsr.w	r0, r3, r2
   b4922:	bf18      	it	ne
   b4924:	4240      	negne	r0, r0
   b4926:	4770      	bx	lr
   b4928:	f04f 0000 	mov.w	r0, #0
   b492c:	4770      	bx	lr
   b492e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b4932:	d105      	bne.n	b4940 <__aeabi_d2iz+0x48>
   b4934:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b4938:	bf08      	it	eq
   b493a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b493e:	4770      	bx	lr
   b4940:	f04f 0000 	mov.w	r0, #0
   b4944:	4770      	bx	lr
   b4946:	bf00      	nop

000b4948 <__aeabi_d2uiz>:
   b4948:	004a      	lsls	r2, r1, #1
   b494a:	d211      	bcs.n	b4970 <__aeabi_d2uiz+0x28>
   b494c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4950:	d211      	bcs.n	b4976 <__aeabi_d2uiz+0x2e>
   b4952:	d50d      	bpl.n	b4970 <__aeabi_d2uiz+0x28>
   b4954:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4958:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b495c:	d40e      	bmi.n	b497c <__aeabi_d2uiz+0x34>
   b495e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4962:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4966:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b496a:	fa23 f002 	lsr.w	r0, r3, r2
   b496e:	4770      	bx	lr
   b4970:	f04f 0000 	mov.w	r0, #0
   b4974:	4770      	bx	lr
   b4976:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b497a:	d102      	bne.n	b4982 <__aeabi_d2uiz+0x3a>
   b497c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4980:	4770      	bx	lr
   b4982:	f04f 0000 	mov.w	r0, #0
   b4986:	4770      	bx	lr

000b4988 <strlen>:
   b4988:	4603      	mov	r3, r0
   b498a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b498e:	2a00      	cmp	r2, #0
   b4990:	d1fb      	bne.n	b498a <strlen+0x2>
   b4992:	1a18      	subs	r0, r3, r0
   b4994:	3801      	subs	r0, #1
   b4996:	4770      	bx	lr

000b4998 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4998:	4809      	ldr	r0, [pc, #36]	; (b49c0 <module_user_pre_init+0x28>)
   b499a:	490a      	ldr	r1, [pc, #40]	; (b49c4 <module_user_pre_init+0x2c>)
   b499c:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b499e:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b49a0:	d005      	beq.n	b49ae <module_user_pre_init+0x16>
   b49a2:	4a09      	ldr	r2, [pc, #36]	; (b49c8 <module_user_pre_init+0x30>)
   b49a4:	4282      	cmp	r2, r0
   b49a6:	d002      	beq.n	b49ae <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b49a8:	1a12      	subs	r2, r2, r0
   b49aa:	f002 fb93 	bl	b70d4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b49ae:	4807      	ldr	r0, [pc, #28]	; (b49cc <module_user_pre_init+0x34>)
   b49b0:	4a07      	ldr	r2, [pc, #28]	; (b49d0 <module_user_pre_init+0x38>)
   b49b2:	2100      	movs	r1, #0
   b49b4:	1a12      	subs	r2, r2, r0
   b49b6:	f002 fb9b 	bl	b70f0 <memset>
    return &link_global_data_start;
}
   b49ba:	4801      	ldr	r0, [pc, #4]	; (b49c0 <module_user_pre_init+0x28>)
   b49bc:	bd08      	pop	{r3, pc}
   b49be:	bf00      	nop
   b49c0:	2003e5d0 	.word	0x2003e5d0
   b49c4:	000b7fec 	.word	0x000b7fec
   b49c8:	2003e63c 	.word	0x2003e63c
   b49cc:	2003e63c 	.word	0x2003e63c
   b49d0:	2003e7f0 	.word	0x2003e7f0

000b49d4 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b49d4:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b49d6:	4e07      	ldr	r6, [pc, #28]	; (b49f4 <module_user_init+0x20>)
   b49d8:	4c07      	ldr	r4, [pc, #28]	; (b49f8 <module_user_init+0x24>)
    module_user_init_hook();
   b49da:	f002 fa2f 	bl	b6e3c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b49de:	1ba4      	subs	r4, r4, r6
   b49e0:	08a4      	lsrs	r4, r4, #2
   b49e2:	2500      	movs	r5, #0
   b49e4:	42ac      	cmp	r4, r5
   b49e6:	d100      	bne.n	b49ea <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b49e8:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b49ea:	f856 3b04 	ldr.w	r3, [r6], #4
   b49ee:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b49f0:	3501      	adds	r5, #1
   b49f2:	e7f7      	b.n	b49e4 <module_user_init+0x10>
   b49f4:	000b7fa4 	.word	0x000b7fa4
   b49f8:	000b7fc8 	.word	0x000b7fc8

000b49fc <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b49fc:	f000 b820 	b.w	b4a40 <setup>

000b4a00 <module_user_loop>:
}

void module_user_loop() {
   b4a00:	b508      	push	{r3, lr}
    loop();
   b4a02:	f000 f831 	bl	b4a68 <loop>
    _post_loop();
}
   b4a06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4a0a:	f002 b9cf 	b.w	b6dac <_post_loop>

000b4a0e <_Znaj>:
   b4a0e:	f001 bc59 	b.w	b62c4 <malloc>

000b4a12 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4a12:	f001 bc5f 	b.w	b62d4 <free>
	...

000b4a18 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b4a18:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b4a1a:	4a03      	ldr	r2, [pc, #12]	; (b4a28 <__cxa_pure_virtual+0x10>)
   b4a1c:	4903      	ldr	r1, [pc, #12]	; (b4a2c <__cxa_pure_virtual+0x14>)
   b4a1e:	200c      	movs	r0, #12
   b4a20:	f001 fbb4 	bl	b618c <panic_>
  while (1);
   b4a24:	e7fe      	b.n	b4a24 <__cxa_pure_virtual+0xc>
   b4a26:	bf00      	nop
   b4a28:	000b5ecd 	.word	0x000b5ecd
   b4a2c:	000b723c 	.word	0x000b723c

000b4a30 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4a30:	7800      	ldrb	r0, [r0, #0]
   b4a32:	fab0 f080 	clz	r0, r0
   b4a36:	0940      	lsrs	r0, r0, #5
   b4a38:	4770      	bx	lr

000b4a3a <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4a3a:	2301      	movs	r3, #1
   b4a3c:	7003      	strb	r3, [r0, #0]
   b4a3e:	4770      	bx	lr

000b4a40 <setup>:
SYSTEM_THREAD(ENABLED);

OledWingAdafruit display;

void setup()
{
   b4a40:	b508      	push	{r3, lr}
  pinMode(A4, INPUT);
   b4a42:	2100      	movs	r1, #0
   b4a44:	200f      	movs	r0, #15
   b4a46:	f002 fa69 	bl	b6f1c <pinMode>

  display.setup();
   b4a4a:	4805      	ldr	r0, [pc, #20]	; (b4a60 <setup+0x20>)
   b4a4c:	f001 f9dc 	bl	b5e08 <_ZN16OledWingAdafruit5setupEv>
  display.clearDisplay();
   b4a50:	4803      	ldr	r0, [pc, #12]	; (b4a60 <setup+0x20>)
   b4a52:	f000 fe37 	bl	b56c4 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display(); // cause the display to be updated
}
   b4a56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  display.display(); // cause the display to be updated
   b4a5a:	4801      	ldr	r0, [pc, #4]	; (b4a60 <setup+0x20>)
   b4a5c:	f001 b8a0 	b.w	b5ba0 <_ZN16Adafruit_SSD13067displayEv>
   b4a60:	2003e648 	.word	0x2003e648
   b4a64:	00000000 	.word	0x00000000

000b4a68 <loop>:

void loop()
{
   b4a68:	b5d0      	push	{r4, r6, r7, lr}
  uint64_t reading = analogRead(A4);
   b4a6a:	200f      	movs	r0, #15
   b4a6c:	f002 fa93 	bl	b6f96 <analogRead>
  double voltage = (reading * 3.3) / 4095.0;
   b4a70:	17c1      	asrs	r1, r0, #31
   b4a72:	f7ff fc5b 	bl	b432c <__aeabi_ul2d>
   b4a76:	a337      	add	r3, pc, #220	; (adr r3, b4b54 <loop+0xec>)
   b4a78:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4a7c:	f7ff fc8c 	bl	b4398 <__aeabi_dmul>
   b4a80:	a336      	add	r3, pc, #216	; (adr r3, b4b5c <loop+0xf4>)
   b4a82:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4a86:	f7ff fdb1 	bl	b45ec <__aeabi_ddiv>
  double celsius = (voltage - 0.5) * 100;
   b4a8a:	4b27      	ldr	r3, [pc, #156]	; (b4b28 <loop+0xc0>)

  double farenheit = (celsius * 9 / 5) + 32;

  display.loop();
   b4a8c:	4c27      	ldr	r4, [pc, #156]	; (b4b2c <loop+0xc4>)
  double celsius = (voltage - 0.5) * 100;
   b4a8e:	2200      	movs	r2, #0
   b4a90:	f7ff faca 	bl	b4028 <__aeabi_dsub>
   b4a94:	4b26      	ldr	r3, [pc, #152]	; (b4b30 <loop+0xc8>)
   b4a96:	2200      	movs	r2, #0
   b4a98:	f7ff fc7e 	bl	b4398 <__aeabi_dmul>
   b4a9c:	4606      	mov	r6, r0
  display.loop();
   b4a9e:	4620      	mov	r0, r4
  double celsius = (voltage - 0.5) * 100;
   b4aa0:	460f      	mov	r7, r1
  display.loop();
   b4aa2:	f001 f9da 	bl	b5e5a <_ZN16OledWingAdafruit4loopEv>

  display.clearDisplay();
   b4aa6:	4620      	mov	r0, r4
   b4aa8:	f000 fe0c 	bl	b56c4 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   b4aac:	4620      	mov	r0, r4
   b4aae:	2101      	movs	r1, #1
   b4ab0:	f000 fc4f 	bl	b5352 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println(celsius);
   b4ab4:	ec47 6b10 	vmov	d0, r6, r7
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b4ab8:	2200      	movs	r2, #0
   b4aba:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b4abe:	2102      	movs	r1, #2
   b4ac0:	4620      	mov	r0, r4
   b4ac2:	e9c4 2304 	strd	r2, r3, [r4, #16]
   b4ac6:	f001 ff2f 	bl	b6928 <_ZN5Print7printlnEdi>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b4aca:	2321      	movs	r3, #33	; 0x21
  display.setCursor(33, 0);
  display.println("degrees celsius");
   b4acc:	4919      	ldr	r1, [pc, #100]	; (b4b34 <loop+0xcc>)
   b4ace:	6123      	str	r3, [r4, #16]
   b4ad0:	4620      	mov	r0, r4
   b4ad2:	f001 fe38 	bl	b6746 <_ZN5Print7printlnEPKc>
   b4ad6:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
   b4ada:	6123      	str	r3, [r4, #16]
  double farenheit = (celsius * 9 / 5) + 32;
   b4adc:	2200      	movs	r2, #0
   b4ade:	4b16      	ldr	r3, [pc, #88]	; (b4b38 <loop+0xd0>)
   b4ae0:	4630      	mov	r0, r6
   b4ae2:	4639      	mov	r1, r7
   b4ae4:	f7ff fc58 	bl	b4398 <__aeabi_dmul>
   b4ae8:	4b14      	ldr	r3, [pc, #80]	; (b4b3c <loop+0xd4>)
   b4aea:	2200      	movs	r2, #0
   b4aec:	f7ff fd7e 	bl	b45ec <__aeabi_ddiv>
   b4af0:	2200      	movs	r2, #0
   b4af2:	4b13      	ldr	r3, [pc, #76]	; (b4b40 <loop+0xd8>)
   b4af4:	f7ff fa9a 	bl	b402c <__adddf3>
   b4af8:	ec41 0b10 	vmov	d0, r0, r1

  display.setCursor(0, 15);
  display.println(farenheit);
   b4afc:	2102      	movs	r1, #2
   b4afe:	4620      	mov	r0, r4
   b4b00:	f001 ff12 	bl	b6928 <_ZN5Print7printlnEdi>
   b4b04:	4b0f      	ldr	r3, [pc, #60]	; (b4b44 <loop+0xdc>)
  display.setCursor(32, 15);
  display.println("degrees");
   b4b06:	4910      	ldr	r1, [pc, #64]	; (b4b48 <loop+0xe0>)
   b4b08:	6123      	str	r3, [r4, #16]
   b4b0a:	4620      	mov	r0, r4
   b4b0c:	f001 fe1b 	bl	b6746 <_ZN5Print7printlnEPKc>
   b4b10:	4b0e      	ldr	r3, [pc, #56]	; (b4b4c <loop+0xe4>)
  display.setCursor(74.5, 15);
  display.println("farenheit");
   b4b12:	490f      	ldr	r1, [pc, #60]	; (b4b50 <loop+0xe8>)
   b4b14:	6123      	str	r3, [r4, #16]
   b4b16:	4620      	mov	r0, r4
   b4b18:	f001 fe15 	bl	b6746 <_ZN5Print7printlnEPKc>

  display.display();
   b4b1c:	4620      	mov	r0, r4
   b4b1e:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
  display.display();
   b4b22:	f001 b83d 	b.w	b5ba0 <_ZN16Adafruit_SSD13067displayEv>
   b4b26:	bf00      	nop
   b4b28:	3fe00000 	.word	0x3fe00000
   b4b2c:	2003e648 	.word	0x2003e648
   b4b30:	40590000 	.word	0x40590000
   b4b34:	000b7251 	.word	0x000b7251
   b4b38:	40220000 	.word	0x40220000
   b4b3c:	40140000 	.word	0x40140000
   b4b40:	40400000 	.word	0x40400000
   b4b44:	000f0020 	.word	0x000f0020
   b4b48:	000b7261 	.word	0x000b7261
   b4b4c:	000f004a 	.word	0x000f004a
   b4b50:	000b7269 	.word	0x000b7269
   b4b54:	66666666 	.word	0x66666666
   b4b58:	400a6666 	.word	0x400a6666
   b4b5c:	00000000 	.word	0x00000000
   b4b60:	40affe00 	.word	0x40affe00

000b4b64 <_GLOBAL__sub_I_SystemMode>:
   b4b64:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4b66:	4b09      	ldr	r3, [pc, #36]	; (b4b8c <_GLOBAL__sub_I_SystemMode+0x28>)
    SleepResult() {}
   b4b68:	4a09      	ldr	r2, [pc, #36]	; (b4b90 <_GLOBAL__sub_I_SystemMode+0x2c>)
   b4b6a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4b6c:	2400      	movs	r4, #0
   b4b6e:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4b72:	2003      	movs	r0, #3
   b4b74:	f001 fb12 	bl	b619c <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b4b78:	4621      	mov	r1, r4
   b4b7a:	2001      	movs	r0, #1
   b4b7c:	f001 fb1e 	bl	b61bc <system_thread_set_state>
   b4b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
OledWingAdafruit display;
   b4b84:	4803      	ldr	r0, [pc, #12]	; (b4b94 <_GLOBAL__sub_I_SystemMode+0x30>)
   b4b86:	2107      	movs	r1, #7
   b4b88:	f001 b910 	b.w	b5dac <_ZN16OledWingAdafruitC1Ei>
   b4b8c:	2003e63c 	.word	0x2003e63c
   b4b90:	ffff0000 	.word	0xffff0000
   b4b94:	2003e648 	.word	0x2003e648

000b4b98 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b4b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4b9c:	b085      	sub	sp, #20
   b4b9e:	461f      	mov	r7, r3
   b4ba0:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b4ba4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b4ba8:	eba8 0902 	sub.w	r9, r8, r2
   b4bac:	eba7 0a01 	sub.w	sl, r7, r1
   b4bb0:	f1b9 0f00 	cmp.w	r9, #0
   b4bb4:	bfb8      	it	lt
   b4bb6:	f1c9 0900 	rsblt	r9, r9, #0
   b4bba:	f1ba 0f00 	cmp.w	sl, #0
   b4bbe:	bfb8      	it	lt
   b4bc0:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b4bc4:	45d1      	cmp	r9, sl
        uint16_t color) {
   b4bc6:	4683      	mov	fp, r0
   b4bc8:	460c      	mov	r4, r1
   b4bca:	4615      	mov	r5, r2
    if (steep) {
   b4bcc:	dd04      	ble.n	b4bd8 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b4bce:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b4bd0:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b4bd2:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b4bd4:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b4bd6:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b4bd8:	42bc      	cmp	r4, r7
   b4bda:	dd05      	ble.n	b4be8 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b4bdc:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b4bde:	4645      	mov	r5, r8
   b4be0:	4690      	mov	r8, r2
    if (x0 > x1) {
   b4be2:	4622      	mov	r2, r4
   b4be4:	463c      	mov	r4, r7
   b4be6:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b4be8:	1b3e      	subs	r6, r7, r4
   b4bea:	b2b2      	uxth	r2, r6
   b4bec:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b4bee:	eba8 0205 	sub.w	r2, r8, r5
   b4bf2:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b4bf6:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b4bfa:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b4bfe:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b4c02:	4545      	cmp	r5, r8
   b4c04:	bfb4      	ite	lt
   b4c06:	2201      	movlt	r2, #1
   b4c08:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b4c0c:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b4c0e:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b4c10:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b4c12:	42bc      	cmp	r4, r7
   b4c14:	dc1c      	bgt.n	b4c50 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b4c16:	f8db 2000 	ldr.w	r2, [fp]
   b4c1a:	9303      	str	r3, [sp, #12]
        if (steep) {
   b4c1c:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b4c1e:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b4c22:	bfc7      	ittee	gt
   b4c24:	4629      	movgt	r1, r5
   b4c26:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b4c28:	462a      	movle	r2, r5
   b4c2a:	4621      	movle	r1, r4
   b4c2c:	4658      	mov	r0, fp
   b4c2e:	47c0      	blx	r8
        }
        err -= dy;
   b4c30:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b4c32:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b4c34:	1ab6      	subs	r6, r6, r2
   b4c36:	b2b1      	uxth	r1, r6
   b4c38:	b236      	sxth	r6, r6
        if (err < 0) {
   b4c3a:	2e00      	cmp	r6, #0
   b4c3c:	da05      	bge.n	b4c4a <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b4c3e:	9a02      	ldr	r2, [sp, #8]
   b4c40:	4415      	add	r5, r2
            err += dx;
   b4c42:	9a00      	ldr	r2, [sp, #0]
   b4c44:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b4c46:	b22d      	sxth	r5, r5
            err += dx;
   b4c48:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b4c4a:	3401      	adds	r4, #1
   b4c4c:	b224      	sxth	r4, r4
   b4c4e:	e7e0      	b.n	b4c12 <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b4c50:	b005      	add	sp, #20
   b4c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b4c56 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b4c56:	4770      	bx	lr

000b4c58 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b4c58:	b410      	push	{r4}
    drawPixel(x, y, color);
   b4c5a:	6804      	ldr	r4, [r0, #0]
   b4c5c:	6924      	ldr	r4, [r4, #16]
   b4c5e:	46a4      	mov	ip, r4
}
   b4c60:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b4c64:	4760      	bx	ip

000b4c66 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b4c66:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b4c68:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b4c6a:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b4c6e:	9502      	str	r5, [sp, #8]
   b4c70:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b4c72:	46a4      	mov	ip, r4
}
   b4c74:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b4c76:	4760      	bx	ip

000b4c78 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b4c78:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b4c7a:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b4c7c:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b4c80:	9502      	str	r5, [sp, #8]
   b4c82:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b4c84:	46a4      	mov	ip, r4
}
   b4c86:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b4c88:	4760      	bx	ip

000b4c8a <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4c8a:	b470      	push	{r4, r5, r6}
   b4c8c:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b4c90:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b4c94:	6804      	ldr	r4, [r0, #0]
   b4c96:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b4c9a:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b4c9c:	46a4      	mov	ip, r4
}
   b4c9e:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b4ca0:	4760      	bx	ip

000b4ca2 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b4ca2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4ca6:	461c      	mov	r4, r3
    startWrite();
   b4ca8:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b4caa:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b4cae:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b4cb0:	4605      	mov	r5, r0
   b4cb2:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b4cb4:	3c01      	subs	r4, #1
   b4cb6:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b4cb8:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b4cba:	b224      	sxth	r4, r4
    startWrite();
   b4cbc:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b4cbe:	682b      	ldr	r3, [r5, #0]
   b4cc0:	f8cd 8004 	str.w	r8, [sp, #4]
   b4cc4:	9400      	str	r4, [sp, #0]
   b4cc6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b4cc8:	4628      	mov	r0, r5
   b4cca:	463b      	mov	r3, r7
   b4ccc:	4632      	mov	r2, r6
   b4cce:	4639      	mov	r1, r7
   b4cd0:	47a0      	blx	r4
    endWrite();
   b4cd2:	682b      	ldr	r3, [r5, #0]
   b4cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4cd6:	4628      	mov	r0, r5
}
   b4cd8:	b002      	add	sp, #8
   b4cda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b4cde:	4718      	bx	r3

000b4ce0 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b4ce0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4ce4:	461d      	mov	r5, r3
    startWrite();
   b4ce6:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b4ce8:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b4cec:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b4cee:	4604      	mov	r4, r0
   b4cf0:	4617      	mov	r7, r2
   b4cf2:	460e      	mov	r6, r1
    startWrite();
   b4cf4:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b4cf6:	e9cd 7800 	strd	r7, r8, [sp]
   b4cfa:	6822      	ldr	r2, [r4, #0]
   b4cfc:	1e6b      	subs	r3, r5, #1
   b4cfe:	4433      	add	r3, r6
   b4d00:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b4d02:	4620      	mov	r0, r4
   b4d04:	b21b      	sxth	r3, r3
   b4d06:	463a      	mov	r2, r7
   b4d08:	4631      	mov	r1, r6
   b4d0a:	47a8      	blx	r5
    endWrite();
   b4d0c:	6823      	ldr	r3, [r4, #0]
   b4d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4d10:	4620      	mov	r0, r4
}
   b4d12:	b002      	add	sp, #8
   b4d14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b4d18:	4718      	bx	r3

000b4d1a <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4d1a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4d1e:	461e      	mov	r6, r3
    startWrite();
   b4d20:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b4d22:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b4d26:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b4d28:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b4d2c:	460c      	mov	r4, r1
   b4d2e:	4605      	mov	r5, r0
   b4d30:	4617      	mov	r7, r2
    startWrite();
   b4d32:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b4d34:	4426      	add	r6, r4
   b4d36:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b4d38:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b4d3a:	da0b      	bge.n	b4d54 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b4d3c:	f8cd 8000 	str.w	r8, [sp]
   b4d40:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b4d44:	4621      	mov	r1, r4
   b4d46:	464b      	mov	r3, r9
   b4d48:	463a      	mov	r2, r7
   b4d4a:	4628      	mov	r0, r5
   b4d4c:	3401      	adds	r4, #1
   b4d4e:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b4d50:	b224      	sxth	r4, r4
   b4d52:	e7f0      	b.n	b4d36 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b4d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4d56:	4628      	mov	r0, r5
}
   b4d58:	b002      	add	sp, #8
   b4d5a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b4d5e:	4718      	bx	r3

000b4d60 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b4d60:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b4d62:	6802      	ldr	r2, [r0, #0]
   b4d64:	9101      	str	r1, [sp, #4]
   b4d66:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b4d6a:	9100      	str	r1, [sp, #0]
   b4d6c:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b4d6e:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b4d72:	2200      	movs	r2, #0
   b4d74:	4611      	mov	r1, r2
   b4d76:	47a0      	blx	r4
}
   b4d78:	b002      	add	sp, #8
   b4d7a:	bd10      	pop	{r4, pc}

000b4d7c <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b4d7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b4d80:	4299      	cmp	r1, r3
        uint16_t color) {
   b4d82:	4616      	mov	r6, r2
   b4d84:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b4d88:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4d8c:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b4d8e:	4680      	mov	r8, r0
   b4d90:	460d      	mov	r5, r1
   b4d92:	461c      	mov	r4, r3
    if(x0 == x1){
   b4d94:	d113      	bne.n	b4dbe <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b4d96:	42be      	cmp	r6, r7
   b4d98:	bfc8      	it	gt
   b4d9a:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4d9c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b4da0:	bfc4      	itt	gt
   b4da2:	463e      	movgt	r6, r7
   b4da4:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4da6:	1c7b      	adds	r3, r7, #1
   b4da8:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b4daa:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4dac:	b21b      	sxth	r3, r3
   b4dae:	4632      	mov	r2, r6
   b4db0:	4629      	mov	r1, r5
   b4db2:	4640      	mov	r0, r8
   b4db4:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b4db6:	b003      	add	sp, #12
   b4db8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4dbc:	4760      	bx	ip
    } else if(y0 == y1){
   b4dbe:	42be      	cmp	r6, r7
   b4dc0:	d10a      	bne.n	b4dd8 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b4dc2:	4299      	cmp	r1, r3
   b4dc4:	bfc2      	ittt	gt
   b4dc6:	460b      	movgt	r3, r1
   b4dc8:	4625      	movgt	r5, r4
   b4dca:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4dcc:	1c63      	adds	r3, r4, #1
   b4dce:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b4dd2:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b4dd4:	1b5b      	subs	r3, r3, r5
   b4dd6:	e7e9      	b.n	b4dac <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b4dd8:	6953      	ldr	r3, [r2, #20]
   b4dda:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b4ddc:	e9cd 7900 	strd	r7, r9, [sp]
   b4de0:	f8d8 3000 	ldr.w	r3, [r8]
   b4de4:	4640      	mov	r0, r8
   b4de6:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b4de8:	4632      	mov	r2, r6
   b4dea:	4623      	mov	r3, r4
   b4dec:	4629      	mov	r1, r5
   b4dee:	47b8      	blx	r7
        endWrite();
   b4df0:	f8d8 3000 	ldr.w	r3, [r8]
   b4df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4df6:	4640      	mov	r0, r8
}
   b4df8:	b003      	add	sp, #12
   b4dfa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b4dfe:	4718      	bx	r3

000b4e00 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4e00:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4e04:	461d      	mov	r5, r3
    startWrite();
   b4e06:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b4e08:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b4e0c:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b4e0e:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b4e12:	4604      	mov	r4, r0
   b4e14:	460f      	mov	r7, r1
   b4e16:	4616      	mov	r6, r2
    startWrite();
   b4e18:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b4e1a:	6823      	ldr	r3, [r4, #0]
   b4e1c:	f8cd 8000 	str.w	r8, [sp]
   b4e20:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b4e24:	4632      	mov	r2, r6
   b4e26:	462b      	mov	r3, r5
   b4e28:	4639      	mov	r1, r7
   b4e2a:	4620      	mov	r0, r4
   b4e2c:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b4e2e:	6823      	ldr	r3, [r4, #0]
   b4e30:	f8cd 8000 	str.w	r8, [sp]
   b4e34:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b4e38:	4432      	add	r2, r6
   b4e3a:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b4e3e:	4639      	mov	r1, r7
   b4e40:	462b      	mov	r3, r5
   b4e42:	4620      	mov	r0, r4
   b4e44:	b212      	sxth	r2, r2
   b4e46:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b4e48:	6823      	ldr	r3, [r4, #0]
   b4e4a:	f8cd 8000 	str.w	r8, [sp]
   b4e4e:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b4e52:	4632      	mov	r2, r6
   b4e54:	464b      	mov	r3, r9
   b4e56:	4639      	mov	r1, r7
   b4e58:	4620      	mov	r0, r4
   b4e5a:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b4e5c:	1e6b      	subs	r3, r5, #1
   b4e5e:	19d9      	adds	r1, r3, r7
   b4e60:	6823      	ldr	r3, [r4, #0]
   b4e62:	f8cd 8000 	str.w	r8, [sp]
   b4e66:	6a1d      	ldr	r5, [r3, #32]
   b4e68:	4620      	mov	r0, r4
   b4e6a:	464b      	mov	r3, r9
   b4e6c:	4632      	mov	r2, r6
   b4e6e:	b209      	sxth	r1, r1
   b4e70:	47a8      	blx	r5
    endWrite();
   b4e72:	6823      	ldr	r3, [r4, #0]
   b4e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4e76:	4620      	mov	r0, r4
}
   b4e78:	b002      	add	sp, #8
   b4e7a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b4e7e:	4718      	bx	r3

000b4e80 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b4e80:	4770      	bx	lr

000b4e82 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b4e82:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b4e86:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b4e8a:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b4e8c:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b4e8e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b4e92:	bf59      	ittee	pl
   b4e94:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b4e96:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b4e98:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b4e9a:	81c3      	strhmi	r3, [r0, #14]
}
   b4e9c:	4770      	bx	lr
	...

000b4ea0 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b4ea0:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b4ea2:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b4ea4:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b4ea6:	4a07      	ldr	r2, [pc, #28]	; (b4ec4 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b4ea8:	4d07      	ldr	r5, [pc, #28]	; (b4ec8 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b4eaa:	8101      	strh	r1, [r0, #8]
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }

  public:
    Print() : write_error(0) {}
   b4eac:	2400      	movs	r4, #0
    _width    = WIDTH;
   b4eae:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b4eb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b4eb4:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b4eb8:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b4eba:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b4ebc:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b4ebe:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b4ec0:	6204      	str	r4, [r0, #32]
}
   b4ec2:	bd30      	pop	{r4, r5, pc}
   b4ec4:	01000101 	.word	0x01000101
   b4ec8:	000b777c 	.word	0x000b777c

000b4ecc <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b4ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4ed0:	b089      	sub	sp, #36	; 0x24
   b4ed2:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b4ed6:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b4ed8:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b4edc:	9304      	str	r3, [sp, #16]
   b4ede:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b4ee2:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b4ee4:	9305      	str	r3, [sp, #20]
   b4ee6:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b4eea:	4604      	mov	r4, r0
    startWrite();
   b4eec:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b4eee:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b4ef2:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b4ef6:	bf48      	it	mi
   b4ef8:	f108 020e 	addmi.w	r2, r8, #14
   b4efc:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b4f00:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b4f02:	4635      	mov	r5, r6
   b4f04:	9b03      	ldr	r3, [sp, #12]
   b4f06:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b4f08:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b4f0c:	189a      	adds	r2, r3, r2
   b4f0e:	9b05      	ldr	r3, [sp, #20]
   b4f10:	428b      	cmp	r3, r1
   b4f12:	b212      	sxth	r2, r2
   b4f14:	dd27      	ble.n	b4f66 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b4f16:	9b04      	ldr	r3, [sp, #16]
   b4f18:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b4f1a:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b4f1e:	9306      	str	r3, [sp, #24]
   b4f20:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b4f24:	4580      	cmp	r8, r0
   b4f26:	fa1f f189 	uxth.w	r1, r9
   b4f2a:	dd17      	ble.n	b4f5c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b4f2c:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b4f2e:	bf05      	ittet	eq
   b4f30:	9b06      	ldreq	r3, [sp, #24]
   b4f32:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b4f34:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b4f36:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b4f38:	bf18      	it	ne
   b4f3a:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b4f3c:	062b      	lsls	r3, r5, #24
   b4f3e:	d50a      	bpl.n	b4f56 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b4f40:	9b02      	ldr	r3, [sp, #8]
   b4f42:	6820      	ldr	r0, [r4, #0]
   b4f44:	9207      	str	r2, [sp, #28]
   b4f46:	4419      	add	r1, r3
   b4f48:	6983      	ldr	r3, [r0, #24]
   b4f4a:	b209      	sxth	r1, r1
   b4f4c:	461f      	mov	r7, r3
   b4f4e:	4620      	mov	r0, r4
   b4f50:	4653      	mov	r3, sl
   b4f52:	47b8      	blx	r7
   b4f54:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b4f56:	f109 0901 	add.w	r9, r9, #1
   b4f5a:	e7e1      	b.n	b4f20 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b4f5c:	9b01      	ldr	r3, [sp, #4]
   b4f5e:	3301      	adds	r3, #1
   b4f60:	9301      	str	r3, [sp, #4]
   b4f62:	445e      	add	r6, fp
   b4f64:	e7ce      	b.n	b4f04 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b4f66:	6823      	ldr	r3, [r4, #0]
   b4f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4f6a:	4620      	mov	r0, r4
}
   b4f6c:	b009      	add	sp, #36	; 0x24
   b4f6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b4f72:	4718      	bx	r3

000b4f74 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b4f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4f78:	ed2d 8b02 	vpush	{d8}
   b4f7c:	b091      	sub	sp, #68	; 0x44
   b4f7e:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b4f80:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b4f82:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b4f86:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b4f8a:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b4f8e:	9103      	str	r1, [sp, #12]
   b4f90:	461f      	mov	r7, r3
   b4f92:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b4f96:	9304      	str	r3, [sp, #16]
   b4f98:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b4f9a:	2a00      	cmp	r2, #0
   b4f9c:	f040 80c5 	bne.w	b512a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b4fa0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b4fa4:	428b      	cmp	r3, r1
   b4fa6:	f340 814c 	ble.w	b5242 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b4faa:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b4fae:	42b3      	cmp	r3, r6
   b4fb0:	f340 8147 	ble.w	b5242 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b4fb4:	2306      	movs	r3, #6
   b4fb6:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b4fba:	2b00      	cmp	r3, #0
   b4fbc:	f340 8141 	ble.w	b5242 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b4fc0:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b4fc4:	2b00      	cmp	r3, #0
   b4fc6:	f340 813c 	ble.w	b5242 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b4fca:	7f03      	ldrb	r3, [r0, #28]
   b4fcc:	b91b      	cbnz	r3, b4fd6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b4fce:	2faf      	cmp	r7, #175	; 0xaf
   b4fd0:	bf84      	itt	hi
   b4fd2:	3701      	addhi	r7, #1
   b4fd4:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b4fd6:	f8db 3000 	ldr.w	r3, [fp]
   b4fda:	4658      	mov	r0, fp
   b4fdc:	695b      	ldr	r3, [r3, #20]
   b4fde:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b4fe0:	2205      	movs	r2, #5
   b4fe2:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b4fe4:	2200      	movs	r2, #0
   b4fe6:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b4fe8:	4a98      	ldr	r2, [pc, #608]	; (b524c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b4fea:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b4fee:	18d3      	adds	r3, r2, r3
   b4ff0:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b4ff2:	b2b3      	uxth	r3, r6
   b4ff4:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b4ff6:	9a05      	ldr	r2, [sp, #20]
   b4ff8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4ffa:	5c9b      	ldrb	r3, [r3, r2]
   b4ffc:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4ffe:	b2ab      	uxth	r3, r5
   b5000:	930b      	str	r3, [sp, #44]	; 0x2c
   b5002:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b5006:	9308      	str	r3, [sp, #32]
   b5008:	9b03      	ldr	r3, [sp, #12]
   b500a:	fb02 f905 	mul.w	r9, r2, r5
   b500e:	fa19 f983 	uxtah	r9, r9, r3
   b5012:	fa0f f389 	sxth.w	r3, r9
   b5016:	ee08 3a10 	vmov	s16, r3
   b501a:	2308      	movs	r3, #8
   b501c:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b501e:	9b03      	ldr	r3, [sp, #12]
   b5020:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5024:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b5028:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b502c:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b502e:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b5032:	07d2      	lsls	r2, r2, #31
   b5034:	d552      	bpl.n	b50dc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b5036:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5038:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b503c:	d13e      	bne.n	b50bc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b503e:	2c01      	cmp	r4, #1
   b5040:	d13c      	bne.n	b50bc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b5042:	699b      	ldr	r3, [r3, #24]
   b5044:	9906      	ldr	r1, [sp, #24]
   b5046:	461f      	mov	r7, r3
   b5048:	9b04      	ldr	r3, [sp, #16]
   b504a:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b504c:	b212      	sxth	r2, r2
   b504e:	4651      	mov	r1, sl
   b5050:	4658      	mov	r0, fp
   b5052:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5054:	f109 0301 	add.w	r3, r9, #1
   b5058:	fa4f f983 	sxtb.w	r9, r3
   b505c:	9b07      	ldr	r3, [sp, #28]
   b505e:	085b      	lsrs	r3, r3, #1
   b5060:	9307      	str	r3, [sp, #28]
   b5062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5064:	3b01      	subs	r3, #1
   b5066:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b506a:	930a      	str	r3, [sp, #40]	; 0x28
   b506c:	d1de      	bne.n	b502c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b506e:	9f05      	ldr	r7, [sp, #20]
   b5070:	3701      	adds	r7, #1
   b5072:	b27b      	sxtb	r3, r7
   b5074:	9305      	str	r3, [sp, #20]
   b5076:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5078:	3b01      	subs	r3, #1
   b507a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b507e:	9309      	str	r3, [sp, #36]	; 0x24
   b5080:	d1b9      	bne.n	b4ff6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b5082:	9b04      	ldr	r3, [sp, #16]
   b5084:	4543      	cmp	r3, r8
   b5086:	d00f      	beq.n	b50a8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b5088:	2d01      	cmp	r5, #1
   b508a:	f8db 3000 	ldr.w	r3, [fp]
   b508e:	d13b      	bne.n	b5108 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b5090:	2c01      	cmp	r4, #1
   b5092:	d139      	bne.n	b5108 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b5094:	9908      	ldr	r1, [sp, #32]
   b5096:	f8cd 8000 	str.w	r8, [sp]
   b509a:	3105      	adds	r1, #5
   b509c:	6a1c      	ldr	r4, [r3, #32]
   b509e:	4632      	mov	r2, r6
   b50a0:	2308      	movs	r3, #8
   b50a2:	b209      	sxth	r1, r1
   b50a4:	4658      	mov	r0, fp
   b50a6:	47a0      	blx	r4
        endWrite();
   b50a8:	f8db 3000 	ldr.w	r3, [fp]
   b50ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b50ae:	4658      	mov	r0, fp
}
   b50b0:	b011      	add	sp, #68	; 0x44
   b50b2:	ecbd 8b02 	vpop	{d8}
   b50b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b50ba:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b50bc:	9906      	ldr	r1, [sp, #24]
   b50be:	fb14 f202 	smulbb	r2, r4, r2
   b50c2:	440a      	add	r2, r1
   b50c4:	9904      	ldr	r1, [sp, #16]
   b50c6:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b50c8:	9400      	str	r4, [sp, #0]
   b50ca:	69db      	ldr	r3, [r3, #28]
   b50cc:	ee18 1a10 	vmov	r1, s16
   b50d0:	461f      	mov	r7, r3
   b50d2:	b212      	sxth	r2, r2
   b50d4:	462b      	mov	r3, r5
   b50d6:	4658      	mov	r0, fp
   b50d8:	47b8      	blx	r7
   b50da:	e7bb      	b.n	b5054 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b50dc:	9a04      	ldr	r2, [sp, #16]
   b50de:	4542      	cmp	r2, r8
   b50e0:	d0b8      	beq.n	b5054 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b50e2:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b50e4:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b50e8:	d107      	bne.n	b50fa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b50ea:	2c01      	cmp	r4, #1
   b50ec:	d105      	bne.n	b50fa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b50ee:	699b      	ldr	r3, [r3, #24]
   b50f0:	9906      	ldr	r1, [sp, #24]
   b50f2:	461f      	mov	r7, r3
   b50f4:	440a      	add	r2, r1
   b50f6:	4643      	mov	r3, r8
   b50f8:	e7a8      	b.n	b504c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b50fa:	9906      	ldr	r1, [sp, #24]
   b50fc:	f8cd 8004 	str.w	r8, [sp, #4]
   b5100:	fb14 f202 	smulbb	r2, r4, r2
   b5104:	440a      	add	r2, r1
   b5106:	e7df      	b.n	b50c8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b5108:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b510a:	f8cd 8004 	str.w	r8, [sp, #4]
   b510e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b5112:	9a08      	ldr	r2, [sp, #32]
   b5114:	00e4      	lsls	r4, r4, #3
   b5116:	440a      	add	r2, r1
   b5118:	4611      	mov	r1, r2
   b511a:	9400      	str	r4, [sp, #0]
   b511c:	69dc      	ldr	r4, [r3, #28]
   b511e:	4632      	mov	r2, r6
   b5120:	462b      	mov	r3, r5
   b5122:	b209      	sxth	r1, r1
   b5124:	4658      	mov	r0, fp
   b5126:	47a0      	blx	r4
        endWrite();
   b5128:	e7be      	b.n	b50a8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b512a:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b512c:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b512e:	6812      	ldr	r2, [r2, #0]
   b5130:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b5132:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b5134:	b2ff      	uxtb	r7, r7
   b5136:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b513a:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b513e:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b5140:	789a      	ldrb	r2, [r3, #2]
   b5142:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b5144:	78da      	ldrb	r2, [r3, #3]
   b5146:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b5148:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b514a:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b514e:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b5152:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b5154:	d801      	bhi.n	b515a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b5156:	2c01      	cmp	r4, #1
   b5158:	d957      	bls.n	b520a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b515a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b515e:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b5160:	fa0f f38a 	sxth.w	r3, sl
   b5164:	9307      	str	r3, [sp, #28]
        startWrite();
   b5166:	f8db 3000 	ldr.w	r3, [fp]
   b516a:	4658      	mov	r0, fp
   b516c:	695b      	ldr	r3, [r3, #20]
   b516e:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5170:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b5172:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5176:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5178:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b517c:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b517e:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5180:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b5182:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5184:	429f      	cmp	r7, r3
   b5186:	d28f      	bcs.n	b50a8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5188:	9b07      	ldr	r3, [sp, #28]
   b518a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b518c:	443b      	add	r3, r7
   b518e:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b5192:	2200      	movs	r2, #0
   b5194:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5196:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5198:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b519a:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b519e:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b51a2:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b51a6:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b51a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b51aa:	9905      	ldr	r1, [sp, #20]
   b51ac:	4291      	cmp	r1, r2
   b51ae:	d241      	bcs.n	b5234 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b51b0:	1c5a      	adds	r2, r3, #1
   b51b2:	b2d2      	uxtb	r2, r2
   b51b4:	075b      	lsls	r3, r3, #29
   b51b6:	920d      	str	r2, [sp, #52]	; 0x34
   b51b8:	d107      	bne.n	b51ca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b51ba:	9b06      	ldr	r3, [sp, #24]
   b51bc:	9906      	ldr	r1, [sp, #24]
   b51be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b51c0:	3301      	adds	r3, #1
   b51c2:	b29b      	uxth	r3, r3
   b51c4:	f812 9001 	ldrb.w	r9, [r2, r1]
   b51c8:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b51ca:	f019 0f80 	tst.w	r9, #128	; 0x80
   b51ce:	d012      	beq.n	b51f6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b51d0:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b51d2:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b51d6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b51da:	d11a      	bne.n	b5212 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b51dc:	2c01      	cmp	r4, #1
   b51de:	d118      	bne.n	b5212 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b51e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b51e2:	699b      	ldr	r3, [r3, #24]
   b51e4:	4411      	add	r1, r2
   b51e6:	9a05      	ldr	r2, [sp, #20]
   b51e8:	4411      	add	r1, r2
   b51ea:	461e      	mov	r6, r3
   b51ec:	4652      	mov	r2, sl
   b51ee:	9b04      	ldr	r3, [sp, #16]
   b51f0:	b209      	sxth	r1, r1
   b51f2:	4658      	mov	r0, fp
   b51f4:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b51f6:	9e05      	ldr	r6, [sp, #20]
   b51f8:	3601      	adds	r6, #1
   b51fa:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b51fc:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b5200:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b5202:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b5206:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b5208:	e7ce      	b.n	b51a8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b520a:	2300      	movs	r3, #0
   b520c:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b5210:	e7a9      	b.n	b5166 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5212:	9805      	ldr	r0, [sp, #20]
   b5214:	9a08      	ldr	r2, [sp, #32]
   b5216:	4402      	add	r2, r0
   b5218:	fb02 1105 	mla	r1, r2, r5, r1
   b521c:	9a04      	ldr	r2, [sp, #16]
   b521e:	e9cd 4200 	strd	r4, r2, [sp]
   b5222:	69db      	ldr	r3, [r3, #28]
   b5224:	ee18 2a10 	vmov	r2, s16
   b5228:	461e      	mov	r6, r3
   b522a:	b209      	sxth	r1, r1
   b522c:	462b      	mov	r3, r5
   b522e:	4658      	mov	r0, fp
   b5230:	47b0      	blx	r6
   b5232:	e7e0      	b.n	b51f6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b5234:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b5236:	3701      	adds	r7, #1
   b5238:	4498      	add	r8, r3
   b523a:	fa5f f888 	uxtb.w	r8, r8
   b523e:	b2ff      	uxtb	r7, r7
   b5240:	e79f      	b.n	b5182 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b5242:	b011      	add	sp, #68	; 0x44
   b5244:	ecbd 8b02 	vpop	{d8}
   b5248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b524c:	000b7273 	.word	0x000b7273

000b5250 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b5250:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b5252:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b5254:	b085      	sub	sp, #20
   b5256:	4604      	mov	r4, r0
   b5258:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b525a:	2a00      	cmp	r2, #0
   b525c:	d134      	bne.n	b52c8 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b525e:	290a      	cmp	r1, #10
   b5260:	d108      	bne.n	b5274 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b5262:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b5264:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b5266:	7e42      	ldrb	r2, [r0, #25]
   b5268:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b526c:	8263      	strh	r3, [r4, #18]
}
   b526e:	2001      	movs	r0, #1
   b5270:	b005      	add	sp, #20
   b5272:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b5274:	290d      	cmp	r1, #13
   b5276:	d0fa      	beq.n	b526e <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b5278:	7ee1      	ldrb	r1, [r4, #27]
   b527a:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b527c:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b527e:	b171      	cbz	r1, b529e <_ZN12Adafruit_GFX5writeEh+0x4e>
   b5280:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b5284:	2106      	movs	r1, #6
   b5286:	fb11 6100 	smlabb	r1, r1, r0, r6
   b528a:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b528e:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b5290:	bfc1      	itttt	gt
   b5292:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b5296:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b5298:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b529c:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b529e:	8ae2      	ldrh	r2, [r4, #22]
   b52a0:	9201      	str	r2, [sp, #4]
   b52a2:	8aa2      	ldrh	r2, [r4, #20]
   b52a4:	9200      	str	r2, [sp, #0]
   b52a6:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b52aa:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b52ae:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b52b2:	4620      	mov	r0, r4
   b52b4:	f7ff fe5e 	bl	b4f74 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b52b8:	7e23      	ldrb	r3, [r4, #24]
   b52ba:	8a22      	ldrh	r2, [r4, #16]
   b52bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b52c0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b52c4:	8223      	strh	r3, [r4, #16]
   b52c6:	e7d2      	b.n	b526e <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b52c8:	290a      	cmp	r1, #10
   b52ca:	d107      	bne.n	b52dc <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b52cc:	2300      	movs	r3, #0
   b52ce:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b52d0:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b52d2:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b52d4:	8a43      	ldrh	r3, [r0, #18]
   b52d6:	fb01 3302 	mla	r3, r1, r2, r3
   b52da:	e7c7      	b.n	b526c <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b52dc:	290d      	cmp	r1, #13
   b52de:	d0c6      	beq.n	b526e <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b52e0:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b52e2:	42a9      	cmp	r1, r5
   b52e4:	d3c3      	bcc.n	b526e <_ZN12Adafruit_GFX5writeEh+0x1e>
   b52e6:	7a51      	ldrb	r1, [r2, #9]
   b52e8:	4299      	cmp	r1, r3
   b52ea:	d3c0      	bcc.n	b526e <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b52ec:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b52ee:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b52f0:	b2ed      	uxtb	r5, r5
   b52f2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b52f6:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b52f8:	b328      	cbz	r0, b5346 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b52fa:	78e9      	ldrb	r1, [r5, #3]
   b52fc:	b319      	cbz	r1, b5346 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b52fe:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b5300:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b5302:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b5304:	b191      	cbz	r1, b532c <_ZN12Adafruit_GFX5writeEh+0xdc>
   b5306:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b530a:	4408      	add	r0, r1
   b530c:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b5310:	fb06 1100 	mla	r1, r6, r0, r1
   b5314:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b5318:	4281      	cmp	r1, r0
   b531a:	dd07      	ble.n	b532c <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b531c:	2000      	movs	r0, #0
   b531e:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b5320:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b5324:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b5326:	fb02 1207 	mla	r2, r2, r7, r1
   b532a:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b532c:	8ae2      	ldrh	r2, [r4, #22]
   b532e:	9201      	str	r2, [sp, #4]
   b5330:	8aa2      	ldrh	r2, [r4, #20]
   b5332:	9200      	str	r2, [sp, #0]
   b5334:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b5338:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b533c:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b5340:	4620      	mov	r0, r4
   b5342:	f7ff fe17 	bl	b4f74 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b5346:	7929      	ldrb	r1, [r5, #4]
   b5348:	7e22      	ldrb	r2, [r4, #24]
   b534a:	8a23      	ldrh	r3, [r4, #16]
   b534c:	fb01 3302 	mla	r3, r1, r2, r3
   b5350:	e7b8      	b.n	b52c4 <_ZN12Adafruit_GFX5writeEh+0x74>

000b5352 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b5352:	2901      	cmp	r1, #1
   b5354:	bf38      	it	cc
   b5356:	2101      	movcc	r1, #1
   b5358:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b535a:	7641      	strb	r1, [r0, #25]
}
   b535c:	4770      	bx	lr

000b535e <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b535e:	4770      	bx	lr

000b5360 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b5360:	b510      	push	{r4, lr}
  }
   b5362:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b5364:	4604      	mov	r4, r0
  }
   b5366:	f7ff fb54 	bl	b4a12 <_ZdlPvj>
   b536a:	4620      	mov	r0, r4
   b536c:	bd10      	pop	{r4, pc}

000b536e <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b536e:	b40e      	push	{r1, r2, r3}
   b5370:	b503      	push	{r0, r1, lr}
   b5372:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b5374:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b5376:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b537a:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b537c:	f001 fadf 	bl	b693e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b5380:	b002      	add	sp, #8
   b5382:	f85d eb04 	ldr.w	lr, [sp], #4
   b5386:	b003      	add	sp, #12
   b5388:	4770      	bx	lr
	...

000b538c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b538c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b538e:	4604      	mov	r4, r0
   b5390:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b5392:	7922      	ldrb	r2, [r4, #4]
   b5394:	68a3      	ldr	r3, [r4, #8]
   b5396:	b132      	cbz	r2, b53a6 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b5398:	b9a3      	cbnz	r3, b53c4 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b539a:	490b      	ldr	r1, [pc, #44]	; (b53c8 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b539c:	b002      	add	sp, #8
   b539e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b53a2:	f001 b9bd 	b.w	b6720 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b53a6:	4a09      	ldr	r2, [pc, #36]	; (b53cc <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b53a8:	7b26      	ldrb	r6, [r4, #12]
   b53aa:	4d09      	ldr	r5, [pc, #36]	; (b53d0 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b53ac:	4909      	ldr	r1, [pc, #36]	; (b53d4 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b53ae:	7b64      	ldrb	r4, [r4, #13]
   b53b0:	2e01      	cmp	r6, #1
   b53b2:	bf18      	it	ne
   b53b4:	4629      	movne	r1, r5
   b53b6:	e9cd 1400 	strd	r1, r4, [sp]
   b53ba:	4907      	ldr	r1, [pc, #28]	; (b53d8 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b53bc:	f7ff ffd7 	bl	b536e <_ZN5Print6printfEPKcz>
  }
   b53c0:	b002      	add	sp, #8
   b53c2:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b53c4:	4a05      	ldr	r2, [pc, #20]	; (b53dc <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b53c6:	e7ef      	b.n	b53a8 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b53c8:	000b77dd 	.word	0x000b77dd
   b53cc:	000b77d4 	.word	0x000b77d4
   b53d0:	000b77d9 	.word	0x000b77d9
   b53d4:	000b77d5 	.word	0x000b77d5
   b53d8:	000b77f3 	.word	0x000b77f3
   b53dc:	000b77cc 	.word	0x000b77cc

000b53e0 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b53e0:	b510      	push	{r4, lr}
   b53e2:	4b04      	ldr	r3, [pc, #16]	; (b53f4 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b53e4:	6003      	str	r3, [r0, #0]
   b53e6:	4604      	mov	r4, r0
  if(buffer) {
   b53e8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b53ea:	b108      	cbz	r0, b53f0 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b53ec:	f000 ff72 	bl	b62d4 <free>
    buffer = NULL;
  }
}
   b53f0:	4620      	mov	r0, r4
   b53f2:	bd10      	pop	{r4, pc}
   b53f4:	000b7ccc 	.word	0x000b7ccc

000b53f8 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b53f8:	b510      	push	{r4, lr}
   b53fa:	4604      	mov	r4, r0
}
   b53fc:	f7ff fff0 	bl	b53e0 <_ZN16Adafruit_SSD1306D1Ev>
   b5400:	4620      	mov	r0, r4
   b5402:	2150      	movs	r1, #80	; 0x50
   b5404:	f7ff fb05 	bl	b4a12 <_ZdlPvj>
   b5408:	4620      	mov	r0, r4
   b540a:	bd10      	pop	{r4, pc}

000b540c <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b540c:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b540e:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b5410:	db4b      	blt.n	b54aa <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b5412:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b5416:	428c      	cmp	r4, r1
   b5418:	dd47      	ble.n	b54aa <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b541a:	2a00      	cmp	r2, #0
   b541c:	db45      	blt.n	b54aa <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b541e:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b5422:	4294      	cmp	r4, r2
   b5424:	dd41      	ble.n	b54aa <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b5426:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b5428:	2c02      	cmp	r4, #2
   b542a:	d01f      	beq.n	b546c <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b542c:	2c03      	cmp	r4, #3
   b542e:	d026      	beq.n	b547e <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b5430:	2c01      	cmp	r4, #1
   b5432:	d104      	bne.n	b543e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b5434:	8904      	ldrh	r4, [r0, #8]
   b5436:	43d2      	mvns	r2, r2
   b5438:	4414      	add	r4, r2
      break;
   b543a:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b543c:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b543e:	2b01      	cmp	r3, #1
   b5440:	d023      	beq.n	b548a <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b5442:	2b02      	cmp	r3, #2
   b5444:	d032      	beq.n	b54ac <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b5446:	bb83      	cbnz	r3, b54aa <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b5448:	2a00      	cmp	r2, #0
   b544a:	4613      	mov	r3, r2
   b544c:	8904      	ldrh	r4, [r0, #8]
   b544e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5450:	bfb8      	it	lt
   b5452:	1dd3      	addlt	r3, r2, #7
   b5454:	10db      	asrs	r3, r3, #3
   b5456:	fb13 1104 	smlabb	r1, r3, r4, r1
   b545a:	f002 0207 	and.w	r2, r2, #7
   b545e:	2301      	movs	r3, #1
   b5460:	4093      	lsls	r3, r2
   b5462:	5c42      	ldrb	r2, [r0, r1]
   b5464:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b5468:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b546a:	e01e      	b.n	b54aa <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b546c:	8904      	ldrh	r4, [r0, #8]
   b546e:	3c01      	subs	r4, #1
   b5470:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b5472:	8944      	ldrh	r4, [r0, #10]
   b5474:	43d2      	mvns	r2, r2
   b5476:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b5478:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b547a:	b212      	sxth	r2, r2
      break;
   b547c:	e7df      	b.n	b543e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b547e:	8944      	ldrh	r4, [r0, #10]
   b5480:	3c01      	subs	r4, #1
   b5482:	1a64      	subs	r4, r4, r1
      break;
   b5484:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b5486:	b222      	sxth	r2, r4
      break;
   b5488:	e7d9      	b.n	b543e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b548a:	2a00      	cmp	r2, #0
   b548c:	8904      	ldrh	r4, [r0, #8]
   b548e:	4613      	mov	r3, r2
   b5490:	bfb8      	it	lt
   b5492:	1dd3      	addlt	r3, r2, #7
   b5494:	10db      	asrs	r3, r3, #3
   b5496:	fb13 1104 	smlabb	r1, r3, r4, r1
   b549a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b549c:	f002 0007 	and.w	r0, r2, #7
   b54a0:	2201      	movs	r2, #1
   b54a2:	4082      	lsls	r2, r0
   b54a4:	5c58      	ldrb	r0, [r3, r1]
   b54a6:	4302      	orrs	r2, r0
   b54a8:	545a      	strb	r2, [r3, r1]
}
   b54aa:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b54ac:	2a00      	cmp	r2, #0
   b54ae:	4613      	mov	r3, r2
   b54b0:	8904      	ldrh	r4, [r0, #8]
   b54b2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b54b4:	bfb8      	it	lt
   b54b6:	1dd3      	addlt	r3, r2, #7
   b54b8:	10db      	asrs	r3, r3, #3
   b54ba:	fb13 1104 	smlabb	r1, r3, r4, r1
   b54be:	f002 0207 	and.w	r2, r2, #7
   b54c2:	2301      	movs	r3, #1
   b54c4:	fa03 f202 	lsl.w	r2, r3, r2
   b54c8:	5c43      	ldrb	r3, [r0, r1]
   b54ca:	405a      	eors	r2, r3
   b54cc:	e7cc      	b.n	b5468 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b54d0 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b54d0:	b570      	push	{r4, r5, r6, lr}
   b54d2:	4604      	mov	r4, r0
   b54d4:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b54d6:	2600      	movs	r6, #0
   b54d8:	f7ff fce2 	bl	b4ea0 <_ZN12Adafruit_GFXC1Ess>
   b54dc:	4b11      	ldr	r3, [pc, #68]	; (b5524 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b54de:	6023      	str	r3, [r4, #0]
   b54e0:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b54e2:	b915      	cbnz	r5, b54ea <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b54e4:	f001 fd8a 	bl	b6ffc <_Z19__fetch_global_Wirev>
   b54e8:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b54ea:	23ff      	movs	r3, #255	; 0xff
   b54ec:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b54f0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b54f4:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b54f8:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b54fc:	4b0a      	ldr	r3, [pc, #40]	; (b5528 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b54fe:	63a3      	str	r3, [r4, #56]	; 0x38
   b5500:	2301      	movs	r3, #1
   b5502:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b5506:	9b05      	ldr	r3, [sp, #20]
   b5508:	64a3      	str	r3, [r4, #72]	; 0x48
   b550a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b550e:	9b06      	ldr	r3, [sp, #24]
   b5510:	86a2      	strh	r2, [r4, #52]	; 0x34
   b5512:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b5516:	6426      	str	r6, [r4, #64]	; 0x40
   b5518:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b551c:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b551e:	4620      	mov	r0, r4
   b5520:	bd70      	pop	{r4, r5, r6, pc}
   b5522:	bf00      	nop
   b5524:	000b7ccc 	.word	0x000b7ccc
   b5528:	000b7818 	.word	0x000b7818

000b552c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b552c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b552e:	4604      	mov	r4, r0
  if(wire) { // I2C
   b5530:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b5532:	460d      	mov	r5, r1
  if(wire) { // I2C
   b5534:	b190      	cbz	r0, b555c <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b5536:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b553a:	f000 ff8d 	bl	b6458 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b553e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5540:	6803      	ldr	r3, [r0, #0]
   b5542:	2100      	movs	r1, #0
   b5544:	689b      	ldr	r3, [r3, #8]
   b5546:	4798      	blx	r3
    WIRE_WRITE(c);
   b5548:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b554a:	6803      	ldr	r3, [r0, #0]
   b554c:	4629      	mov	r1, r5
   b554e:	689b      	ldr	r3, [r3, #8]
   b5550:	4798      	blx	r3
    wire->endTransmission();
   b5552:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b5554:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b5558:	f000 bf85 	b.w	b6466 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b555c:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b5560:	4601      	mov	r1, r0
   b5562:	b298      	uxth	r0, r3
   b5564:	f001 fceb 	bl	b6f3e <digitalWrite>
  if(spi) {
   b5568:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b556a:	b120      	cbz	r0, b5576 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b556c:	4629      	mov	r1, r5
}
   b556e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b5572:	f001 bac7 	b.w	b6b04 <_ZN8SPIClass8transferEh>
   b5576:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5578:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b557a:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b557e:	ea05 0107 	and.w	r1, r5, r7
   b5582:	b280      	uxth	r0, r0
   b5584:	f001 fcdb 	bl	b6f3e <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b5588:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b558c:	2101      	movs	r1, #1
   b558e:	b280      	uxth	r0, r0
   b5590:	f001 fcd5 	bl	b6f3e <digitalWrite>
      digitalWrite(clkPin , LOW);
   b5594:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5598:	2100      	movs	r1, #0
   b559a:	b280      	uxth	r0, r0
   b559c:	f001 fccf 	bl	b6f3e <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b55a0:	3e01      	subs	r6, #1
   b55a2:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b55a6:	d1e8      	bne.n	b557a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b55a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b55aa <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b55aa:	b538      	push	{r3, r4, r5, lr}
   b55ac:	4604      	mov	r4, r0
  TRANSACTION_START
   b55ae:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b55b0:	460d      	mov	r5, r1
  TRANSACTION_START
   b55b2:	b180      	cbz	r0, b55d6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b55b4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b55b6:	f000 ff41 	bl	b643c <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b55ba:	2d00      	cmp	r5, #0
   b55bc:	4620      	mov	r0, r4
   b55be:	bf14      	ite	ne
   b55c0:	21a7      	movne	r1, #167	; 0xa7
   b55c2:	21a6      	moveq	r1, #166	; 0xa6
   b55c4:	f7ff ffb2 	bl	b552c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b55c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b55ca:	b188      	cbz	r0, b55f0 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b55cc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b55ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b55d2:	f000 bf33 	b.w	b643c <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b55d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b55d8:	b118      	cbz	r0, b55e2 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b55da:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b55de:	f001 fa23 	bl	b6a28 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b55e2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b55e6:	2100      	movs	r1, #0
   b55e8:	b280      	uxth	r0, r0
   b55ea:	f001 fca8 	bl	b6f3e <digitalWrite>
   b55ee:	e7e4      	b.n	b55ba <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b55f0:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b55f4:	2101      	movs	r1, #1
   b55f6:	b280      	uxth	r0, r0
   b55f8:	f001 fca1 	bl	b6f3e <digitalWrite>
   b55fc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b55fe:	b118      	cbz	r0, b5608 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b5600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b5604:	f001 b9f6 	b.w	b69f4 <_ZN8SPIClass14endTransactionEv>
}
   b5608:	bd38      	pop	{r3, r4, r5, pc}

000b560a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b560a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b560e:	4604      	mov	r4, r0
  if(wire) { // I2C
   b5610:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b5612:	460d      	mov	r5, r1
  if(wire) { // I2C
   b5614:	188f      	adds	r7, r1, r2
   b5616:	b340      	cbz	r0, b566a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b5618:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b561c:	f000 ff1c 	bl	b6458 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5620:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5622:	6803      	ldr	r3, [r0, #0]
   b5624:	2100      	movs	r1, #0
   b5626:	689b      	ldr	r3, [r3, #8]
   b5628:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b562a:	2601      	movs	r6, #1
    while(n--) {
   b562c:	42af      	cmp	r7, r5
        wire->endTransmission();
   b562e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b5630:	d017      	beq.n	b5662 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b5632:	2e1f      	cmp	r6, #31
   b5634:	d90c      	bls.n	b5650 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b5636:	f000 ff16 	bl	b6466 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b563a:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b563e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5640:	f000 ff0a 	bl	b6458 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5644:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5646:	6803      	ldr	r3, [r0, #0]
   b5648:	2100      	movs	r1, #0
   b564a:	689b      	ldr	r3, [r3, #8]
   b564c:	4798      	blx	r3
        bytesOut = 1;
   b564e:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b5650:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5652:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5656:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b5658:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b565a:	689b      	ldr	r3, [r3, #8]
   b565c:	4798      	blx	r3
      bytesOut++;
   b565e:	b2f6      	uxtb	r6, r6
    while(n--) {
   b5660:	e7e4      	b.n	b562c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b5662:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b5666:	f000 befe 	b.w	b6466 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b566a:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b566e:	4601      	mov	r1, r0
   b5670:	b298      	uxth	r0, r3
   b5672:	f001 fc64 	bl	b6f3e <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b5676:	42bd      	cmp	r5, r7
   b5678:	d022      	beq.n	b56c0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b567a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b567c:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b5680:	b118      	cbz	r0, b568a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b5682:	4649      	mov	r1, r9
   b5684:	f001 fa3e 	bl	b6b04 <_ZN8SPIClass8transferEh>
   b5688:	e7f5      	b.n	b5676 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b568a:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b568c:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b5690:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5694:	ea09 0108 	and.w	r1, r9, r8
   b5698:	b280      	uxth	r0, r0
   b569a:	f001 fc50 	bl	b6f3e <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b569e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b56a2:	2101      	movs	r1, #1
   b56a4:	b280      	uxth	r0, r0
   b56a6:	f001 fc4a 	bl	b6f3e <digitalWrite>
      digitalWrite(clkPin , LOW);
   b56aa:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b56ae:	2100      	movs	r1, #0
   b56b0:	b280      	uxth	r0, r0
   b56b2:	f001 fc44 	bl	b6f3e <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b56b6:	3e01      	subs	r6, #1
   b56b8:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b56bc:	d1e8      	bne.n	b5690 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b56be:	e7da      	b.n	b5676 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b56c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b56c4 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b56c4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b56c8:	1dda      	adds	r2, r3, #7
   b56ca:	bf48      	it	mi
   b56cc:	f103 020e 	addmi.w	r2, r3, #14
   b56d0:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b56d4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b56d6:	10d2      	asrs	r2, r2, #3
   b56d8:	435a      	muls	r2, r3
   b56da:	2100      	movs	r1, #0
   b56dc:	f001 bd08 	b.w	b70f0 <memset>

000b56e0 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b56e0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b56e4:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b56e6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b56e8:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b56ec:	4604      	mov	r4, r0
   b56ee:	460f      	mov	r7, r1
   b56f0:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b56f2:	b1c3      	cbz	r3, b5726 <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b56f4:	4620      	mov	r0, r4
   b56f6:	f7ff ffe5 	bl	b56c4 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b56fa:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b56fe:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b5702:	2820      	cmp	r0, #32
   b5704:	dc21      	bgt.n	b574a <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b5706:	2320      	movs	r3, #32
   b5708:	2201      	movs	r2, #1
   b570a:	3820      	subs	r0, #32
   b570c:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b5710:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b5714:	2373      	movs	r3, #115	; 0x73
   b5716:	3973      	subs	r1, #115	; 0x73
   b5718:	9300      	str	r3, [sp, #0]
   b571a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b571e:	4b89      	ldr	r3, [pc, #548]	; (b5944 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b5720:	f340 024f 	sbfx	r2, r0, #1, #16
   b5724:	e021      	b.n	b576a <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b5726:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b572a:	1dd8      	adds	r0, r3, #7
   b572c:	bf48      	it	mi
   b572e:	f103 000e 	addmi.w	r0, r3, #14
   b5732:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b5736:	10c0      	asrs	r0, r0, #3
   b5738:	4358      	muls	r0, r3
   b573a:	f000 fdc3 	bl	b62c4 <malloc>
   b573e:	62e0      	str	r0, [r4, #44]	; 0x2c
   b5740:	2800      	cmp	r0, #0
   b5742:	d1d7      	bne.n	b56f4 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b5744:	b004      	add	sp, #16
   b5746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b574a:	3840      	subs	r0, #64	; 0x40
   b574c:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b5750:	fa02 f280 	sxtah	r2, r2, r0
   b5754:	2340      	movs	r3, #64	; 0x40
   b5756:	2001      	movs	r0, #1
   b5758:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b575c:	2352      	movs	r3, #82	; 0x52
   b575e:	3952      	subs	r1, #82	; 0x52
   b5760:	9300      	str	r3, [sp, #0]
   b5762:	4b79      	ldr	r3, [pc, #484]	; (b5948 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b5764:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b5768:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b576a:	4620      	mov	r0, r4
   b576c:	f341 014f 	sbfx	r1, r1, #1, #16
   b5770:	f7ff fbac 	bl	b4ecc <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b5774:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b5776:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b577a:	2800      	cmp	r0, #0
   b577c:	d078      	beq.n	b5870 <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b577e:	2d00      	cmp	r5, #0
   b5780:	d174      	bne.n	b586c <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b5782:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b5786:	2b20      	cmp	r3, #32
   b5788:	bf0c      	ite	eq
   b578a:	253c      	moveq	r5, #60	; 0x3c
   b578c:	253d      	movne	r5, #61	; 0x3d
   b578e:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b5792:	f1b8 0f00 	cmp.w	r8, #0
   b5796:	d001      	beq.n	b579c <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b5798:	f000 fe54 	bl	b6444 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b579c:	b1fe      	cbz	r6, b57de <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b579e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b57a2:	2800      	cmp	r0, #0
   b57a4:	db1b      	blt.n	b57de <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b57a6:	2101      	movs	r1, #1
   b57a8:	b280      	uxth	r0, r0
   b57aa:	f001 fbb7 	bl	b6f1c <pinMode>
    digitalWrite(rstPin, HIGH);
   b57ae:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b57b2:	2101      	movs	r1, #1
   b57b4:	b280      	uxth	r0, r0
   b57b6:	f001 fbc2 	bl	b6f3e <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b57ba:	2001      	movs	r0, #1
   b57bc:	f000 fdaa 	bl	b6314 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b57c0:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b57c4:	2100      	movs	r1, #0
   b57c6:	b280      	uxth	r0, r0
   b57c8:	f001 fbb9 	bl	b6f3e <digitalWrite>
    delay(10);                  // Wait 10 ms
   b57cc:	200a      	movs	r0, #10
   b57ce:	f000 fda1 	bl	b6314 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b57d2:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b57d6:	2101      	movs	r1, #1
   b57d8:	b280      	uxth	r0, r0
   b57da:	f001 fbb0 	bl	b6f3e <digitalWrite>
  TRANSACTION_START
   b57de:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b57e0:	2800      	cmp	r0, #0
   b57e2:	d074      	beq.n	b58ce <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b57e4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b57e6:	f000 fe29 	bl	b643c <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b57ea:	2204      	movs	r2, #4
   b57ec:	4957      	ldr	r1, [pc, #348]	; (b594c <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b57ee:	4620      	mov	r0, r4
   b57f0:	f7ff ff0b 	bl	b560a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b57f4:	8961      	ldrh	r1, [r4, #10]
   b57f6:	3901      	subs	r1, #1
   b57f8:	b2c9      	uxtb	r1, r1
   b57fa:	4620      	mov	r0, r4
   b57fc:	f7ff fe96 	bl	b552c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b5800:	4953      	ldr	r1, [pc, #332]	; (b5950 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b5802:	2204      	movs	r2, #4
   b5804:	4620      	mov	r0, r4
   b5806:	f7ff ff00 	bl	b560a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b580a:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b580e:	2b01      	cmp	r3, #1
   b5810:	bf0c      	ite	eq
   b5812:	2110      	moveq	r1, #16
   b5814:	2114      	movne	r1, #20
   b5816:	4620      	mov	r0, r4
   b5818:	f7ff fe88 	bl	b552c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b581c:	2204      	movs	r2, #4
   b581e:	494d      	ldr	r1, [pc, #308]	; (b5954 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b5820:	4620      	mov	r0, r4
   b5822:	f7ff fef2 	bl	b560a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b5826:	68a3      	ldr	r3, [r4, #8]
   b5828:	4a4b      	ldr	r2, [pc, #300]	; (b5958 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b582a:	4293      	cmp	r3, r2
   b582c:	d15c      	bne.n	b58e8 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b582e:	494b      	ldr	r1, [pc, #300]	; (b595c <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b5830:	2204      	movs	r2, #4
   b5832:	4620      	mov	r0, r4
   b5834:	f7ff fee9 	bl	b560a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b5838:	21d9      	movs	r1, #217	; 0xd9
   b583a:	4620      	mov	r0, r4
   b583c:	f7ff fe76 	bl	b552c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b5840:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5844:	2b01      	cmp	r3, #1
   b5846:	bf0c      	ite	eq
   b5848:	2122      	moveq	r1, #34	; 0x22
   b584a:	21f1      	movne	r1, #241	; 0xf1
   b584c:	4620      	mov	r0, r4
   b584e:	f7ff fe6d 	bl	b552c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b5852:	4620      	mov	r0, r4
   b5854:	4942      	ldr	r1, [pc, #264]	; (b5960 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b5856:	2206      	movs	r2, #6
   b5858:	f7ff fed7 	bl	b560a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b585c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b585e:	2800      	cmp	r0, #0
   b5860:	d063      	beq.n	b592a <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b5862:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b5864:	f000 fdea 	bl	b643c <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b5868:	2001      	movs	r0, #1
   b586a:	e76b      	b.n	b5744 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b586c:	b26d      	sxtb	r5, r5
   b586e:	e78e      	b.n	b578e <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b5870:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b5874:	2101      	movs	r1, #1
   b5876:	b280      	uxth	r0, r0
   b5878:	f001 fb50 	bl	b6f1c <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b587c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5880:	2101      	movs	r1, #1
   b5882:	b280      	uxth	r0, r0
   b5884:	f001 fb4a 	bl	b6f1c <pinMode>
    SSD1306_DESELECT
   b5888:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b588c:	2101      	movs	r1, #1
   b588e:	b280      	uxth	r0, r0
   b5890:	f001 fb55 	bl	b6f3e <digitalWrite>
    if(spi) { // Hardware SPI
   b5894:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b5896:	b13d      	cbz	r5, b58a8 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b5898:	f1b8 0f00 	cmp.w	r8, #0
   b589c:	f43f af7e 	beq.w	b579c <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b58a0:	4628      	mov	r0, r5
   b58a2:	f001 f893 	bl	b69cc <_ZN8SPIClass5beginEv>
   b58a6:	e779      	b.n	b579c <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b58a8:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b58ac:	2101      	movs	r1, #1
   b58ae:	b280      	uxth	r0, r0
   b58b0:	f001 fb34 	bl	b6f1c <pinMode>
      pinMode(clkPin , OUTPUT);
   b58b4:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b58b8:	2101      	movs	r1, #1
   b58ba:	b280      	uxth	r0, r0
   b58bc:	f001 fb2e 	bl	b6f1c <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b58c0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b58c4:	4629      	mov	r1, r5
   b58c6:	b280      	uxth	r0, r0
   b58c8:	f001 fb39 	bl	b6f3e <digitalWrite>
   b58cc:	e766      	b.n	b579c <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b58ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b58d0:	b118      	cbz	r0, b58da <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b58d2:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b58d6:	f001 f8a7 	bl	b6a28 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b58da:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b58de:	2100      	movs	r1, #0
   b58e0:	b280      	uxth	r0, r0
   b58e2:	f001 fb2c 	bl	b6f3e <digitalWrite>
   b58e6:	e780      	b.n	b57ea <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b58e8:	4a1e      	ldr	r2, [pc, #120]	; (b5964 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b58ea:	4293      	cmp	r3, r2
   b58ec:	d10e      	bne.n	b590c <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b58ee:	491e      	ldr	r1, [pc, #120]	; (b5968 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b58f0:	2203      	movs	r2, #3
   b58f2:	4620      	mov	r0, r4
   b58f4:	f7ff fe89 	bl	b560a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b58f8:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b58fc:	2b01      	cmp	r3, #1
   b58fe:	bf0c      	ite	eq
   b5900:	219f      	moveq	r1, #159	; 0x9f
   b5902:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b5904:	4620      	mov	r0, r4
   b5906:	f7ff fe11 	bl	b552c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b590a:	e795      	b.n	b5838 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b590c:	4a17      	ldr	r2, [pc, #92]	; (b596c <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b590e:	4293      	cmp	r3, r2
   b5910:	d192      	bne.n	b5838 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b5912:	4917      	ldr	r1, [pc, #92]	; (b5970 <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b5914:	2203      	movs	r2, #3
   b5916:	4620      	mov	r0, r4
   b5918:	f7ff fe77 	bl	b560a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b591c:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5920:	2b01      	cmp	r3, #1
   b5922:	bf0c      	ite	eq
   b5924:	2110      	moveq	r1, #16
   b5926:	21af      	movne	r1, #175	; 0xaf
   b5928:	e7ec      	b.n	b5904 <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b592a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b592e:	2101      	movs	r1, #1
   b5930:	b280      	uxth	r0, r0
   b5932:	f001 fb04 	bl	b6f3e <digitalWrite>
   b5936:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5938:	2800      	cmp	r0, #0
   b593a:	d095      	beq.n	b5868 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b593c:	f001 f85a 	bl	b69f4 <_ZN8SPIClass14endTransactionEv>
   b5940:	e792      	b.n	b5868 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b5942:	bf00      	nop
   b5944:	000b7ae4 	.word	0x000b7ae4
   b5948:	000b7824 	.word	0x000b7824
   b594c:	000b7d2c 	.word	0x000b7d2c
   b5950:	000b7d30 	.word	0x000b7d30
   b5954:	000b7d34 	.word	0x000b7d34
   b5958:	00200080 	.word	0x00200080
   b595c:	000b7d3e 	.word	0x000b7d3e
   b5960:	000b7d38 	.word	0x000b7d38
   b5964:	00400080 	.word	0x00400080
   b5968:	000b7d42 	.word	0x000b7d42
   b596c:	00100060 	.word	0x00100060
   b5970:	000b7d45 	.word	0x000b7d45

000b5974 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5974:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b5976:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5978:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b597c:	db3d      	blt.n	b59fa <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b597e:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5982:	4294      	cmp	r4, r2
   b5984:	dd39      	ble.n	b59fa <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b5986:	2900      	cmp	r1, #0
      w += x;
   b5988:	bfbe      	ittt	lt
   b598a:	185b      	addlt	r3, r3, r1
   b598c:	b21b      	sxthlt	r3, r3
      x  = 0;
   b598e:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b5990:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b5994:	18ce      	adds	r6, r1, r3
   b5996:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b5998:	bfc4      	itt	gt
   b599a:	1a63      	subgt	r3, r4, r1
   b599c:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b599e:	2b00      	cmp	r3, #0
   b59a0:	dd2b      	ble.n	b59fa <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b59a2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b59a4:	10d6      	asrs	r6, r2, #3
   b59a6:	fb14 1106 	smlabb	r1, r4, r6, r1
   b59aa:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b59ac:	f002 0007 	and.w	r0, r2, #7
   b59b0:	2201      	movs	r2, #1
   b59b2:	4082      	lsls	r2, r0
      switch(color) {
   b59b4:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b59b6:	b2d2      	uxtb	r2, r2
      switch(color) {
   b59b8:	d016      	beq.n	b59e8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b59ba:	2d02      	cmp	r5, #2
   b59bc:	d00b      	beq.n	b59d6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b59be:	b9e5      	cbnz	r5, b59fa <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b59c0:	43d2      	mvns	r2, r2
   b59c2:	b2d2      	uxtb	r2, r2
   b59c4:	440b      	add	r3, r1
   b59c6:	4299      	cmp	r1, r3
   b59c8:	d017      	beq.n	b59fa <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b59ca:	f811 0b01 	ldrb.w	r0, [r1], #1
   b59ce:	4010      	ands	r0, r2
   b59d0:	f801 0c01 	strb.w	r0, [r1, #-1]
   b59d4:	e7f7      	b.n	b59c6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b59d6:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b59d8:	4299      	cmp	r1, r3
   b59da:	d00e      	beq.n	b59fa <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b59dc:	f811 0b01 	ldrb.w	r0, [r1], #1
   b59e0:	4050      	eors	r0, r2
   b59e2:	f801 0c01 	strb.w	r0, [r1, #-1]
   b59e6:	e7f7      	b.n	b59d8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b59e8:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b59ea:	4299      	cmp	r1, r3
   b59ec:	d005      	beq.n	b59fa <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b59ee:	f811 0b01 	ldrb.w	r0, [r1], #1
   b59f2:	4310      	orrs	r0, r2
   b59f4:	f801 0c01 	strb.w	r0, [r1, #-1]
   b59f8:	e7f7      	b.n	b59ea <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b59fa:	bd70      	pop	{r4, r5, r6, pc}

000b59fc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b59fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b59fe:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b5a00:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b5a04:	db76      	blt.n	b5af4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b5a06:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b5a0a:	42b1      	cmp	r1, r6
   b5a0c:	da72      	bge.n	b5af4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b5a0e:	2a00      	cmp	r2, #0
      __h += __y;
   b5a10:	bfbe      	ittt	lt
   b5a12:	189b      	addlt	r3, r3, r2
   b5a14:	b21b      	sxthlt	r3, r3
      __y = 0;
   b5a16:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b5a18:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5a1c:	18d7      	adds	r7, r2, r3
   b5a1e:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b5a20:	bfc4      	itt	gt
   b5a22:	1aa3      	subgt	r3, r4, r2
   b5a24:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b5a26:	2b00      	cmp	r3, #0
   b5a28:	dd64      	ble.n	b5af4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5a2a:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b5a2e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b5a30:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b5a34:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b5a38:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5a3a:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b5a3e:	d023      	beq.n	b5a88 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b5a40:	f1c2 0208 	rsb	r2, r2, #8
   b5a44:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5a46:	492d      	ldr	r1, [pc, #180]	; (b5afc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b5a48:	4293      	cmp	r3, r2
   b5a4a:	bf3c      	itt	cc
   b5a4c:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b5a50:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5a54:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b5a56:	bf3c      	itt	cc
   b5a58:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b5a5c:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b5a60:	2d01      	cmp	r5, #1
   b5a62:	d007      	beq.n	b5a74 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b5a64:	2d02      	cmp	r5, #2
   b5a66:	d02e      	beq.n	b5ac6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b5a68:	b94d      	cbnz	r5, b5a7e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b5a6a:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5a6e:	ea2c 0101 	bic.w	r1, ip, r1
   b5a72:	e003      	b.n	b5a7c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b5a74:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5a78:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b5a7c:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b5a7e:	4293      	cmp	r3, r2
   b5a80:	d338      	bcc.n	b5af4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b5a82:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b5a86:	440c      	add	r4, r1
        h -= mod;
   b5a88:	1a9a      	subs	r2, r3, r2
   b5a8a:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b5a8c:	2a07      	cmp	r2, #7
   b5a8e:	d90e      	bls.n	b5aae <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b5a90:	2d02      	cmp	r5, #2
   b5a92:	d11d      	bne.n	b5ad0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b5a94:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b5a96:	7821      	ldrb	r1, [r4, #0]
   b5a98:	43c9      	mvns	r1, r1
   b5a9a:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b5a9c:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b5a9e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b5aa2:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b5aa4:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b5aa6:	440c      	add	r4, r1
            } while(h >= 8);
   b5aa8:	d8f5      	bhi.n	b5a96 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b5aaa:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b5aae:	b30a      	cbz	r2, b5af4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b5ab0:	4b13      	ldr	r3, [pc, #76]	; (b5b00 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b5ab2:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b5ab4:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b5ab6:	d01a      	beq.n	b5aee <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b5ab8:	2d02      	cmp	r5, #2
   b5aba:	d01c      	beq.n	b5af6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b5abc:	b9d5      	cbnz	r5, b5af4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b5abe:	7822      	ldrb	r2, [r4, #0]
   b5ac0:	ea22 0303 	bic.w	r3, r2, r3
   b5ac4:	e015      	b.n	b5af2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b5ac6:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5aca:	ea81 010c 	eor.w	r1, r1, ip
   b5ace:	e7d5      	b.n	b5a7c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b5ad0:	1e29      	subs	r1, r5, #0
   b5ad2:	bf18      	it	ne
   b5ad4:	2101      	movne	r1, #1
   b5ad6:	4249      	negs	r1, r1
   b5ad8:	b2c9      	uxtb	r1, r1
   b5ada:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b5adc:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b5ade:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b5ae0:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b5ae4:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b5ae6:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b5ae8:	4434      	add	r4, r6
            } while(h >= 8);
   b5aea:	d8f7      	bhi.n	b5adc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b5aec:	e7dd      	b.n	b5aaa <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b5aee:	7822      	ldrb	r2, [r4, #0]
   b5af0:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b5af2:	7023      	strb	r3, [r4, #0]
}
   b5af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b5af6:	7822      	ldrb	r2, [r4, #0]
   b5af8:	4053      	eors	r3, r2
   b5afa:	e7fa      	b.n	b5af2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b5afc:	000b7d1c 	.word	0x000b7d1c
   b5b00:	000b7d24 	.word	0x000b7d24

000b5b04 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5b04:	b470      	push	{r4, r5, r6}
   b5b06:	4614      	mov	r4, r2
  switch(rotation) {
   b5b08:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5b0a:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b5b0e:	2a02      	cmp	r2, #2
   b5b10:	d00d      	beq.n	b5b2e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b5b12:	2a03      	cmp	r2, #3
   b5b14:	d018      	beq.n	b5b48 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b5b16:	2a01      	cmp	r2, #1
   b5b18:	d111      	bne.n	b5b3e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b5b1a:	8902      	ldrh	r2, [r0, #8]
   b5b1c:	43e4      	mvns	r4, r4
   b5b1e:	4414      	add	r4, r2
   b5b20:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b5b22:	9603      	str	r6, [sp, #12]
   b5b24:	460a      	mov	r2, r1
   b5b26:	4621      	mov	r1, r4
}
   b5b28:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b5b2a:	f7ff bf67 	b.w	b59fc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b5b2e:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b5b30:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b5b32:	43e4      	mvns	r4, r4
    x -= (w-1);
   b5b34:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b5b36:	4414      	add	r4, r2
    x -= (w-1);
   b5b38:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b5b3a:	b224      	sxth	r4, r4
    x -= (w-1);
   b5b3c:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b5b3e:	9603      	str	r6, [sp, #12]
   b5b40:	4622      	mov	r2, r4
}
   b5b42:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b5b44:	f7ff bf16 	b.w	b5974 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b5b48:	8945      	ldrh	r5, [r0, #10]
   b5b4a:	4419      	add	r1, r3
   b5b4c:	1a69      	subs	r1, r5, r1
   b5b4e:	b209      	sxth	r1, r1
    break;
   b5b50:	e7e7      	b.n	b5b22 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b5b52 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5b52:	b430      	push	{r4, r5}
   b5b54:	4614      	mov	r4, r2
  switch(rotation) {
   b5b56:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5b58:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b5b5c:	2a02      	cmp	r2, #2
   b5b5e:	d00d      	beq.n	b5b7c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b5b60:	2a03      	cmp	r2, #3
   b5b62:	d018      	beq.n	b5b96 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b5b64:	2a01      	cmp	r2, #1
   b5b66:	d111      	bne.n	b5b8c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b5b68:	18e2      	adds	r2, r4, r3
   b5b6a:	8904      	ldrh	r4, [r0, #8]
   b5b6c:	1aa4      	subs	r4, r4, r2
   b5b6e:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b5b70:	9502      	str	r5, [sp, #8]
   b5b72:	460a      	mov	r2, r1
   b5b74:	4621      	mov	r1, r4
}
   b5b76:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b5b78:	f7ff befc 	b.w	b5974 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b5b7c:	8902      	ldrh	r2, [r0, #8]
   b5b7e:	43c9      	mvns	r1, r1
   b5b80:	4411      	add	r1, r2
    y -= (h-1);
   b5b82:	18e2      	adds	r2, r4, r3
   b5b84:	8944      	ldrh	r4, [r0, #10]
   b5b86:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b5b88:	b209      	sxth	r1, r1
    y -= (h-1);
   b5b8a:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b5b8c:	9502      	str	r5, [sp, #8]
   b5b8e:	4622      	mov	r2, r4
}
   b5b90:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b5b92:	f7ff bf33 	b.w	b59fc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b5b96:	8942      	ldrh	r2, [r0, #10]
   b5b98:	43c9      	mvns	r1, r1
   b5b9a:	4411      	add	r1, r2
   b5b9c:	b209      	sxth	r1, r1
    break;
   b5b9e:	e7e7      	b.n	b5b70 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b5ba0 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b5ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5ba4:	4604      	mov	r4, r0
  TRANSACTION_START
   b5ba6:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b5ba8:	2800      	cmp	r0, #0
   b5baa:	d042      	beq.n	b5c32 <_ZN16Adafruit_SSD13067displayEv+0x92>
   b5bac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5bae:	f000 fc45 	bl	b643c <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b5bb2:	4947      	ldr	r1, [pc, #284]	; (b5cd0 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b5bb4:	2205      	movs	r2, #5
   b5bb6:	4620      	mov	r0, r4
   b5bb8:	f7ff fd27 	bl	b560a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b5bbc:	8921      	ldrh	r1, [r4, #8]
   b5bbe:	3901      	subs	r1, #1
   b5bc0:	4620      	mov	r0, r4
   b5bc2:	b2c9      	uxtb	r1, r1
   b5bc4:	f7ff fcb2 	bl	b552c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b5bc8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b5bcc:	1dde      	adds	r6, r3, #7
   b5bce:	bf48      	it	mi
   b5bd0:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b5bd4:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b5bd8:	8923      	ldrh	r3, [r4, #8]
   b5bda:	10f6      	asrs	r6, r6, #3
   b5bdc:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b5be0:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b5be4:	2800      	cmp	r0, #0
   b5be6:	d03a      	beq.n	b5c5e <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b5be8:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5bec:	f000 fc34 	bl	b6458 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b5bf0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5bf2:	6803      	ldr	r3, [r0, #0]
   b5bf4:	2140      	movs	r1, #64	; 0x40
   b5bf6:	689b      	ldr	r3, [r3, #8]
   b5bf8:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b5bfa:	2701      	movs	r7, #1
    while(count--) {
   b5bfc:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b5bfe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b5c00:	d024      	beq.n	b5c4c <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b5c02:	2f1f      	cmp	r7, #31
   b5c04:	d90c      	bls.n	b5c20 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b5c06:	f000 fc2e 	bl	b6466 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b5c0a:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5c0e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5c10:	f000 fc22 	bl	b6458 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b5c14:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5c16:	6803      	ldr	r3, [r0, #0]
   b5c18:	2140      	movs	r1, #64	; 0x40
   b5c1a:	689b      	ldr	r3, [r3, #8]
   b5c1c:	4798      	blx	r3
        bytesOut = 1;
   b5c1e:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b5c20:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5c22:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5c26:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b5c28:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b5c2a:	689b      	ldr	r3, [r3, #8]
   b5c2c:	4798      	blx	r3
      bytesOut++;
   b5c2e:	b2ff      	uxtb	r7, r7
    while(count--) {
   b5c30:	e7e4      	b.n	b5bfc <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b5c32:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5c34:	b118      	cbz	r0, b5c3e <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b5c36:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b5c3a:	f000 fef5 	bl	b6a28 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b5c3e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5c42:	2100      	movs	r1, #0
   b5c44:	b280      	uxth	r0, r0
   b5c46:	f001 f97a 	bl	b6f3e <digitalWrite>
   b5c4a:	e7b2      	b.n	b5bb2 <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b5c4c:	f000 fc0b 	bl	b6466 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b5c50:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5c52:	b378      	cbz	r0, b5cb4 <_ZN16Adafruit_SSD13067displayEv+0x114>
   b5c54:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b5c56:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5c5a:	f000 bbef 	b.w	b643c <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b5c5e:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b5c62:	2101      	movs	r1, #1
   b5c64:	b280      	uxth	r0, r0
   b5c66:	f001 f96a 	bl	b6f3e <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b5c6a:	42ae      	cmp	r6, r5
   b5c6c:	d0f0      	beq.n	b5c50 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b5c6e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b5c70:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b5c74:	b118      	cbz	r0, b5c7e <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b5c76:	4649      	mov	r1, r9
   b5c78:	f000 ff44 	bl	b6b04 <_ZN8SPIClass8transferEh>
   b5c7c:	e7f5      	b.n	b5c6a <_ZN16Adafruit_SSD13067displayEv+0xca>
   b5c7e:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5c80:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b5c84:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5c88:	ea09 0108 	and.w	r1, r9, r8
   b5c8c:	b280      	uxth	r0, r0
   b5c8e:	f001 f956 	bl	b6f3e <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b5c92:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5c96:	2101      	movs	r1, #1
   b5c98:	b280      	uxth	r0, r0
   b5c9a:	f001 f950 	bl	b6f3e <digitalWrite>
      digitalWrite(clkPin , LOW);
   b5c9e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5ca2:	2100      	movs	r1, #0
   b5ca4:	b280      	uxth	r0, r0
   b5ca6:	f001 f94a 	bl	b6f3e <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5caa:	3f01      	subs	r7, #1
   b5cac:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b5cb0:	d1e8      	bne.n	b5c84 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b5cb2:	e7da      	b.n	b5c6a <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b5cb4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5cb8:	2101      	movs	r1, #1
   b5cba:	b280      	uxth	r0, r0
   b5cbc:	f001 f93f 	bl	b6f3e <digitalWrite>
   b5cc0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5cc2:	b118      	cbz	r0, b5ccc <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b5cc4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b5cc8:	f000 be94 	b.w	b69f4 <_ZN8SPIClass14endTransactionEv>
}
   b5ccc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b5cd0:	000b7d48 	.word	0x000b7d48

000b5cd4 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b5cd4:	2100      	movs	r1, #0
   b5cd6:	220a      	movs	r2, #10
   b5cd8:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b5cdc:	4770      	bx	lr

000b5cde <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b5cde:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b5ce0:	b510      	push	{r4, lr}
   b5ce2:	4604      	mov	r4, r0
    this->pin = pin;
   b5ce4:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b5ce6:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b5ce8:	b288      	uxth	r0, r1
   b5cea:	f001 f941 	bl	b6f70 <digitalRead>
   b5cee:	b108      	cbz	r0, b5cf4 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b5cf0:	2303      	movs	r3, #3
   b5cf2:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5cf4:	f000 f8f2 	bl	b5edc <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b5cf8:	6020      	str	r0, [r4, #0]
#endif
}
   b5cfa:	bd10      	pop	{r4, pc}

000b5cfc <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b5cfc:	b538      	push	{r3, r4, r5, lr}
   b5cfe:	460c      	mov	r4, r1
   b5d00:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b5d02:	4611      	mov	r1, r2
   b5d04:	b2a0      	uxth	r0, r4
   b5d06:	f001 f909 	bl	b6f1c <pinMode>
  
  this->attach(pin);
   b5d0a:	4621      	mov	r1, r4
   b5d0c:	4628      	mov	r0, r5
}
   b5d0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b5d12:	f7ff bfe4 	b.w	b5cde <_ZN8Debounce6attachEi>

000b5d16 <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   b5d16:	b538      	push	{r3, r4, r5, lr}
   b5d18:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   b5d1a:	79c0      	ldrb	r0, [r0, #7]
   b5d1c:	f001 f928 	bl	b6f70 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   b5d20:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   b5d22:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   b5d24:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   b5d28:	bf18      	it	ne
   b5d2a:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b5d2c:	f3c5 0540 	ubfx	r5, r5, #1, #1
   b5d30:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   b5d32:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b5d34:	d00a      	beq.n	b5d4c <_ZN8Debounce6updateEv+0x36>
   b5d36:	f000 f8d1 	bl	b5edc <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   b5d3a:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   b5d3c:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   b5d3e:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   b5d42:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   b5d44:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   b5d46:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b5d4a:	bd38      	pop	{r3, r4, r5, pc}
   b5d4c:	f000 f8c6 	bl	b5edc <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   b5d50:	6823      	ldr	r3, [r4, #0]
   b5d52:	1ac0      	subs	r0, r0, r3
   b5d54:	88a3      	ldrh	r3, [r4, #4]
   b5d56:	4298      	cmp	r0, r3
   b5d58:	d3f4      	bcc.n	b5d44 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   b5d5a:	79a3      	ldrb	r3, [r4, #6]
   b5d5c:	f003 0301 	and.w	r3, r3, #1
   b5d60:	42ab      	cmp	r3, r5
   b5d62:	d0ef      	beq.n	b5d44 <_ZN8Debounce6updateEv+0x2e>
   b5d64:	f000 f8ba 	bl	b5edc <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   b5d68:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   b5d6a:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   b5d6c:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   b5d70:	f043 0308 	orr.w	r3, r3, #8
   b5d74:	e7e5      	b.n	b5d42 <_ZN8Debounce6updateEv+0x2c>
	...

000b5d78 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b5d78:	b510      	push	{r4, lr}
   b5d7a:	4b06      	ldr	r3, [pc, #24]	; (b5d94 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b5d7c:	6003      	str	r3, [r0, #0]
   b5d7e:	4604      	mov	r4, r0
	if (mutex) {
   b5d80:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b5d82:	b108      	cbz	r0, b5d88 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b5d84:	f000 f88a 	bl	b5e9c <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b5d88:	4620      	mov	r0, r4
   b5d8a:	f7ff fb29 	bl	b53e0 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b5d8e:	4620      	mov	r0, r4
   b5d90:	bd10      	pop	{r4, pc}
   b5d92:	bf00      	nop
   b5d94:	000b7d58 	.word	0x000b7d58

000b5d98 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b5d98:	b510      	push	{r4, lr}
   b5d9a:	4604      	mov	r4, r0
}
   b5d9c:	f7ff ffec 	bl	b5d78 <_ZN16OledWingAdafruitD1Ev>
   b5da0:	4620      	mov	r0, r4
   b5da2:	2170      	movs	r1, #112	; 0x70
   b5da4:	f7fe fe35 	bl	b4a12 <_ZdlPvj>
   b5da8:	4620      	mov	r0, r4
   b5daa:	bd10      	pop	{r4, pc}

000b5dac <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b5dac:	b530      	push	{r4, r5, lr}
   b5dae:	b085      	sub	sp, #20
   b5db0:	4604      	mov	r4, r0
   b5db2:	460d      	mov	r5, r1
   b5db4:	f001 f922 	bl	b6ffc <_Z19__fetch_global_Wirev>
   b5db8:	4a10      	ldr	r2, [pc, #64]	; (b5dfc <_ZN16OledWingAdafruitC1Ei+0x50>)
   b5dba:	4911      	ldr	r1, [pc, #68]	; (b5e00 <_ZN16OledWingAdafruitC1Ei+0x54>)
   b5dbc:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b5dc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5dc4:	2180      	movs	r1, #128	; 0x80
   b5dc6:	4603      	mov	r3, r0
   b5dc8:	9200      	str	r2, [sp, #0]
   b5dca:	4620      	mov	r0, r4
   b5dcc:	2220      	movs	r2, #32
   b5dce:	f7ff fb7f 	bl	b54d0 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b5dd2:	4b0c      	ldr	r3, [pc, #48]	; (b5e04 <_ZN16OledWingAdafruitC1Ei+0x58>)
   b5dd4:	6023      	str	r3, [r4, #0]
   b5dd6:	2300      	movs	r3, #0
   b5dd8:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b5ddc:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b5de0:	f7ff ff78 	bl	b5cd4 <_ZN8DebounceC1Ev>
   b5de4:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5de8:	f7ff ff74 	bl	b5cd4 <_ZN8DebounceC1Ev>
   b5dec:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b5df0:	f7ff ff70 	bl	b5cd4 <_ZN8DebounceC1Ev>
}
   b5df4:	4620      	mov	r0, r4
   b5df6:	b005      	add	sp, #20
   b5df8:	bd30      	pop	{r4, r5, pc}
   b5dfa:	bf00      	nop
   b5dfc:	00061a80 	.word	0x00061a80
   b5e00:	000186a0 	.word	0x000186a0
   b5e04:	000b7d58 	.word	0x000b7d58

000b5e08 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b5e08:	b513      	push	{r0, r1, r4, lr}
   b5e0a:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b5e0c:	3050      	adds	r0, #80	; 0x50
   b5e0e:	f000 f83d 	bl	b5e8c <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b5e12:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5e14:	07d9      	lsls	r1, r3, #31
   b5e16:	d505      	bpl.n	b5e24 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b5e18:	2202      	movs	r2, #2
   b5e1a:	2104      	movs	r1, #4
   b5e1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b5e20:	f7ff ff6c 	bl	b5cfc <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b5e24:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5e26:	079a      	lsls	r2, r3, #30
   b5e28:	d505      	bpl.n	b5e36 <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b5e2a:	2200      	movs	r2, #0
   b5e2c:	2103      	movs	r1, #3
   b5e2e:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5e32:	f7ff ff63 	bl	b5cfc <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b5e36:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5e38:	075b      	lsls	r3, r3, #29
   b5e3a:	d505      	bpl.n	b5e48 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b5e3c:	2202      	movs	r2, #2
   b5e3e:	4611      	mov	r1, r2
   b5e40:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b5e44:	f7ff ff5a 	bl	b5cfc <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b5e48:	2301      	movs	r3, #1
   b5e4a:	9300      	str	r3, [sp, #0]
   b5e4c:	223c      	movs	r2, #60	; 0x3c
   b5e4e:	2102      	movs	r1, #2
   b5e50:	4620      	mov	r0, r4
   b5e52:	f7ff fc45 	bl	b56e0 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b5e56:	b002      	add	sp, #8
   b5e58:	bd10      	pop	{r4, pc}

000b5e5a <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   b5e5a:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   b5e5c:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b5e5e:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   b5e60:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   b5e62:	d502      	bpl.n	b5e6a <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   b5e64:	3058      	adds	r0, #88	; 0x58
   b5e66:	f7ff ff56 	bl	b5d16 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   b5e6a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5e6c:	079a      	lsls	r2, r3, #30
   b5e6e:	d503      	bpl.n	b5e78 <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   b5e70:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5e74:	f7ff ff4f 	bl	b5d16 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   b5e78:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5e7a:	075b      	lsls	r3, r3, #29
   b5e7c:	d505      	bpl.n	b5e8a <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   b5e7e:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   b5e82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   b5e86:	f7ff bf46 	b.w	b5d16 <_ZN8Debounce6updateEv>
}
   b5e8a:	bd10      	pop	{r4, pc}

000b5e8c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b5e8c:	b508      	push	{r3, lr}
   b5e8e:	4b02      	ldr	r3, [pc, #8]	; (b5e98 <os_mutex_create+0xc>)
   b5e90:	681b      	ldr	r3, [r3, #0]
   b5e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5e94:	9301      	str	r3, [sp, #4]
   b5e96:	bd08      	pop	{r3, pc}
   b5e98:	00030248 	.word	0x00030248

000b5e9c <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b5e9c:	b508      	push	{r3, lr}
   b5e9e:	4b02      	ldr	r3, [pc, #8]	; (b5ea8 <os_mutex_destroy+0xc>)
   b5ea0:	681b      	ldr	r3, [r3, #0]
   b5ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5ea4:	9301      	str	r3, [sp, #4]
   b5ea6:	bd08      	pop	{r3, pc}
   b5ea8:	00030248 	.word	0x00030248

000b5eac <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5eac:	b508      	push	{r3, lr}
   b5eae:	4b02      	ldr	r3, [pc, #8]	; (b5eb8 <os_mutex_recursive_create+0xc>)
   b5eb0:	681b      	ldr	r3, [r3, #0]
   b5eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5eb4:	9301      	str	r3, [sp, #4]
   b5eb6:	bd08      	pop	{r3, pc}
   b5eb8:	00030248 	.word	0x00030248

000b5ebc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5ebc:	b508      	push	{r3, lr}
   b5ebe:	4b02      	ldr	r3, [pc, #8]	; (b5ec8 <HAL_RNG_GetRandomNumber+0xc>)
   b5ec0:	681b      	ldr	r3, [r3, #0]
   b5ec2:	685b      	ldr	r3, [r3, #4]
   b5ec4:	9301      	str	r3, [sp, #4]
   b5ec6:	bd08      	pop	{r3, pc}
   b5ec8:	00030218 	.word	0x00030218

000b5ecc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5ecc:	b508      	push	{r3, lr}
   b5ece:	4b02      	ldr	r3, [pc, #8]	; (b5ed8 <HAL_Delay_Microseconds+0xc>)
   b5ed0:	681b      	ldr	r3, [r3, #0]
   b5ed2:	68db      	ldr	r3, [r3, #12]
   b5ed4:	9301      	str	r3, [sp, #4]
   b5ed6:	bd08      	pop	{r3, pc}
   b5ed8:	00030218 	.word	0x00030218

000b5edc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5edc:	b508      	push	{r3, lr}
   b5ede:	4b02      	ldr	r3, [pc, #8]	; (b5ee8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5ee0:	681b      	ldr	r3, [r3, #0]
   b5ee2:	695b      	ldr	r3, [r3, #20]
   b5ee4:	9301      	str	r3, [sp, #4]
   b5ee6:	bd08      	pop	{r3, pc}
   b5ee8:	00030218 	.word	0x00030218

000b5eec <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   b5eec:	b508      	push	{r3, lr}
   b5eee:	4b02      	ldr	r3, [pc, #8]	; (b5ef8 <hal_pin_validate_function+0xc>)
   b5ef0:	681b      	ldr	r3, [r3, #0]
   b5ef2:	685b      	ldr	r3, [r3, #4]
   b5ef4:	9301      	str	r3, [sp, #4]
   b5ef6:	bd08      	pop	{r3, pc}
   b5ef8:	0003022c 	.word	0x0003022c

000b5efc <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b5efc:	b508      	push	{r3, lr}
   b5efe:	4b02      	ldr	r3, [pc, #8]	; (b5f08 <hal_gpio_mode+0xc>)
   b5f00:	681b      	ldr	r3, [r3, #0]
   b5f02:	689b      	ldr	r3, [r3, #8]
   b5f04:	9301      	str	r3, [sp, #4]
   b5f06:	bd08      	pop	{r3, pc}
   b5f08:	0003022c 	.word	0x0003022c

000b5f0c <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b5f0c:	b508      	push	{r3, lr}
   b5f0e:	4b02      	ldr	r3, [pc, #8]	; (b5f18 <hal_gpio_get_mode+0xc>)
   b5f10:	681b      	ldr	r3, [r3, #0]
   b5f12:	68db      	ldr	r3, [r3, #12]
   b5f14:	9301      	str	r3, [sp, #4]
   b5f16:	bd08      	pop	{r3, pc}
   b5f18:	0003022c 	.word	0x0003022c

000b5f1c <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b5f1c:	b508      	push	{r3, lr}
   b5f1e:	4b02      	ldr	r3, [pc, #8]	; (b5f28 <hal_gpio_write+0xc>)
   b5f20:	681b      	ldr	r3, [r3, #0]
   b5f22:	691b      	ldr	r3, [r3, #16]
   b5f24:	9301      	str	r3, [sp, #4]
   b5f26:	bd08      	pop	{r3, pc}
   b5f28:	0003022c 	.word	0x0003022c

000b5f2c <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b5f2c:	b508      	push	{r3, lr}
   b5f2e:	4b02      	ldr	r3, [pc, #8]	; (b5f38 <hal_gpio_read+0xc>)
   b5f30:	681b      	ldr	r3, [r3, #0]
   b5f32:	695b      	ldr	r3, [r3, #20]
   b5f34:	9301      	str	r3, [sp, #4]
   b5f36:	bd08      	pop	{r3, pc}
   b5f38:	0003022c 	.word	0x0003022c

000b5f3c <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b5f3c:	b508      	push	{r3, lr}
   b5f3e:	4b02      	ldr	r3, [pc, #8]	; (b5f48 <hal_adc_read+0xc>)
   b5f40:	681b      	ldr	r3, [r3, #0]
   b5f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5f44:	9301      	str	r3, [sp, #4]
   b5f46:	bd08      	pop	{r3, pc}
   b5f48:	0003022c 	.word	0x0003022c

000b5f4c <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b5f4c:	b508      	push	{r3, lr}
   b5f4e:	4b02      	ldr	r3, [pc, #8]	; (b5f58 <hal_i2c_set_speed+0xc>)
   b5f50:	681b      	ldr	r3, [r3, #0]
   b5f52:	681b      	ldr	r3, [r3, #0]
   b5f54:	9301      	str	r3, [sp, #4]
   b5f56:	bd08      	pop	{r3, pc}
   b5f58:	00030228 	.word	0x00030228

000b5f5c <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b5f5c:	b508      	push	{r3, lr}
   b5f5e:	4b02      	ldr	r3, [pc, #8]	; (b5f68 <hal_i2c_begin+0xc>)
   b5f60:	681b      	ldr	r3, [r3, #0]
   b5f62:	68db      	ldr	r3, [r3, #12]
   b5f64:	9301      	str	r3, [sp, #4]
   b5f66:	bd08      	pop	{r3, pc}
   b5f68:	00030228 	.word	0x00030228

000b5f6c <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5f6c:	b508      	push	{r3, lr}
   b5f6e:	4b02      	ldr	r3, [pc, #8]	; (b5f78 <hal_i2c_begin_transmission+0xc>)
   b5f70:	681b      	ldr	r3, [r3, #0]
   b5f72:	699b      	ldr	r3, [r3, #24]
   b5f74:	9301      	str	r3, [sp, #4]
   b5f76:	bd08      	pop	{r3, pc}
   b5f78:	00030228 	.word	0x00030228

000b5f7c <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5f7c:	b508      	push	{r3, lr}
   b5f7e:	4b02      	ldr	r3, [pc, #8]	; (b5f88 <hal_i2c_end_transmission+0xc>)
   b5f80:	681b      	ldr	r3, [r3, #0]
   b5f82:	69db      	ldr	r3, [r3, #28]
   b5f84:	9301      	str	r3, [sp, #4]
   b5f86:	bd08      	pop	{r3, pc}
   b5f88:	00030228 	.word	0x00030228

000b5f8c <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5f8c:	b508      	push	{r3, lr}
   b5f8e:	4b02      	ldr	r3, [pc, #8]	; (b5f98 <hal_i2c_write+0xc>)
   b5f90:	681b      	ldr	r3, [r3, #0]
   b5f92:	6a1b      	ldr	r3, [r3, #32]
   b5f94:	9301      	str	r3, [sp, #4]
   b5f96:	bd08      	pop	{r3, pc}
   b5f98:	00030228 	.word	0x00030228

000b5f9c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5f9c:	b508      	push	{r3, lr}
   b5f9e:	4b02      	ldr	r3, [pc, #8]	; (b5fa8 <hal_i2c_available+0xc>)
   b5fa0:	681b      	ldr	r3, [r3, #0]
   b5fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5fa4:	9301      	str	r3, [sp, #4]
   b5fa6:	bd08      	pop	{r3, pc}
   b5fa8:	00030228 	.word	0x00030228

000b5fac <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5fac:	b508      	push	{r3, lr}
   b5fae:	4b02      	ldr	r3, [pc, #8]	; (b5fb8 <hal_i2c_read+0xc>)
   b5fb0:	681b      	ldr	r3, [r3, #0]
   b5fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5fb4:	9301      	str	r3, [sp, #4]
   b5fb6:	bd08      	pop	{r3, pc}
   b5fb8:	00030228 	.word	0x00030228

000b5fbc <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5fbc:	b508      	push	{r3, lr}
   b5fbe:	4b02      	ldr	r3, [pc, #8]	; (b5fc8 <hal_i2c_peek+0xc>)
   b5fc0:	681b      	ldr	r3, [r3, #0]
   b5fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5fc4:	9301      	str	r3, [sp, #4]
   b5fc6:	bd08      	pop	{r3, pc}
   b5fc8:	00030228 	.word	0x00030228

000b5fcc <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5fcc:	b508      	push	{r3, lr}
   b5fce:	4b02      	ldr	r3, [pc, #8]	; (b5fd8 <hal_i2c_flush+0xc>)
   b5fd0:	681b      	ldr	r3, [r3, #0]
   b5fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5fd4:	9301      	str	r3, [sp, #4]
   b5fd6:	bd08      	pop	{r3, pc}
   b5fd8:	00030228 	.word	0x00030228

000b5fdc <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5fdc:	b508      	push	{r3, lr}
   b5fde:	4b02      	ldr	r3, [pc, #8]	; (b5fe8 <hal_i2c_is_enabled+0xc>)
   b5fe0:	681b      	ldr	r3, [r3, #0]
   b5fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5fe4:	9301      	str	r3, [sp, #4]
   b5fe6:	bd08      	pop	{r3, pc}
   b5fe8:	00030228 	.word	0x00030228

000b5fec <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5fec:	b508      	push	{r3, lr}
   b5fee:	4b02      	ldr	r3, [pc, #8]	; (b5ff8 <hal_i2c_init+0xc>)
   b5ff0:	681b      	ldr	r3, [r3, #0]
   b5ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5ff4:	9301      	str	r3, [sp, #4]
   b5ff6:	bd08      	pop	{r3, pc}
   b5ff8:	00030228 	.word	0x00030228

000b5ffc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5ffc:	b508      	push	{r3, lr}
   b5ffe:	4b02      	ldr	r3, [pc, #8]	; (b6008 <inet_inet_ntop+0xc>)
   b6000:	681b      	ldr	r3, [r3, #0]
   b6002:	695b      	ldr	r3, [r3, #20]
   b6004:	9301      	str	r3, [sp, #4]
   b6006:	bd08      	pop	{r3, pc}
   b6008:	00030264 	.word	0x00030264

000b600c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b600c:	b508      	push	{r3, lr}
   b600e:	4b02      	ldr	r3, [pc, #8]	; (b6018 <netdb_freeaddrinfo+0xc>)
   b6010:	681b      	ldr	r3, [r3, #0]
   b6012:	689b      	ldr	r3, [r3, #8]
   b6014:	9301      	str	r3, [sp, #4]
   b6016:	bd08      	pop	{r3, pc}
   b6018:	00030268 	.word	0x00030268

000b601c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b601c:	b508      	push	{r3, lr}
   b601e:	4b02      	ldr	r3, [pc, #8]	; (b6028 <netdb_getaddrinfo+0xc>)
   b6020:	681b      	ldr	r3, [r3, #0]
   b6022:	68db      	ldr	r3, [r3, #12]
   b6024:	9301      	str	r3, [sp, #4]
   b6026:	bd08      	pop	{r3, pc}
   b6028:	00030268 	.word	0x00030268

000b602c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b602c:	b508      	push	{r3, lr}
   b602e:	4b02      	ldr	r3, [pc, #8]	; (b6038 <hal_spi_begin+0xc>)
   b6030:	681b      	ldr	r3, [r3, #0]
   b6032:	681b      	ldr	r3, [r3, #0]
   b6034:	9301      	str	r3, [sp, #4]
   b6036:	bd08      	pop	{r3, pc}
   b6038:	00030230 	.word	0x00030230

000b603c <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b603c:	b508      	push	{r3, lr}
   b603e:	4b02      	ldr	r3, [pc, #8]	; (b6048 <hal_spi_transfer+0xc>)
   b6040:	681b      	ldr	r3, [r3, #0]
   b6042:	695b      	ldr	r3, [r3, #20]
   b6044:	9301      	str	r3, [sp, #4]
   b6046:	bd08      	pop	{r3, pc}
   b6048:	00030230 	.word	0x00030230

000b604c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b604c:	b508      	push	{r3, lr}
   b604e:	4b02      	ldr	r3, [pc, #8]	; (b6058 <hal_spi_init+0xc>)
   b6050:	681b      	ldr	r3, [r3, #0]
   b6052:	69db      	ldr	r3, [r3, #28]
   b6054:	9301      	str	r3, [sp, #4]
   b6056:	bd08      	pop	{r3, pc}
   b6058:	00030230 	.word	0x00030230

000b605c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b605c:	b508      	push	{r3, lr}
   b605e:	4b02      	ldr	r3, [pc, #8]	; (b6068 <hal_spi_is_enabled+0xc>)
   b6060:	681b      	ldr	r3, [r3, #0]
   b6062:	6a1b      	ldr	r3, [r3, #32]
   b6064:	9301      	str	r3, [sp, #4]
   b6066:	bd08      	pop	{r3, pc}
   b6068:	00030230 	.word	0x00030230

000b606c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b606c:	b508      	push	{r3, lr}
   b606e:	4b02      	ldr	r3, [pc, #8]	; (b6078 <hal_spi_info+0xc>)
   b6070:	681b      	ldr	r3, [r3, #0]
   b6072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6074:	9301      	str	r3, [sp, #4]
   b6076:	bd08      	pop	{r3, pc}
   b6078:	00030230 	.word	0x00030230

000b607c <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, const hal_spi_config_t*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b607c:	b508      	push	{r3, lr}
   b607e:	4b02      	ldr	r3, [pc, #8]	; (b6088 <hal_spi_set_settings+0xc>)
   b6080:	681b      	ldr	r3, [r3, #0]
   b6082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6084:	9301      	str	r3, [sp, #4]
   b6086:	bd08      	pop	{r3, pc}
   b6088:	00030230 	.word	0x00030230

000b608c <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b608c:	b508      	push	{r3, lr}
   b608e:	4b02      	ldr	r3, [pc, #8]	; (b6098 <hal_spi_acquire+0xc>)
   b6090:	681b      	ldr	r3, [r3, #0]
   b6092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6094:	9301      	str	r3, [sp, #4]
   b6096:	bd08      	pop	{r3, pc}
   b6098:	00030230 	.word	0x00030230

000b609c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b609c:	b508      	push	{r3, lr}
   b609e:	4b02      	ldr	r3, [pc, #8]	; (b60a8 <hal_spi_release+0xc>)
   b60a0:	681b      	ldr	r3, [r3, #0]
   b60a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b60a4:	9301      	str	r3, [sp, #4]
   b60a6:	bd08      	pop	{r3, pc}
   b60a8:	00030230 	.word	0x00030230

000b60ac <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b60ac:	b508      	push	{r3, lr}
   b60ae:	4b02      	ldr	r3, [pc, #8]	; (b60b8 <hal_usart_write+0xc>)
   b60b0:	681b      	ldr	r3, [r3, #0]
   b60b2:	68db      	ldr	r3, [r3, #12]
   b60b4:	9301      	str	r3, [sp, #4]
   b60b6:	bd08      	pop	{r3, pc}
   b60b8:	0003023c 	.word	0x0003023c

000b60bc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b60bc:	b508      	push	{r3, lr}
   b60be:	4b02      	ldr	r3, [pc, #8]	; (b60c8 <hal_usart_available+0xc>)
   b60c0:	681b      	ldr	r3, [r3, #0]
   b60c2:	691b      	ldr	r3, [r3, #16]
   b60c4:	9301      	str	r3, [sp, #4]
   b60c6:	bd08      	pop	{r3, pc}
   b60c8:	0003023c 	.word	0x0003023c

000b60cc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b60cc:	b508      	push	{r3, lr}
   b60ce:	4b02      	ldr	r3, [pc, #8]	; (b60d8 <hal_usart_read+0xc>)
   b60d0:	681b      	ldr	r3, [r3, #0]
   b60d2:	695b      	ldr	r3, [r3, #20]
   b60d4:	9301      	str	r3, [sp, #4]
   b60d6:	bd08      	pop	{r3, pc}
   b60d8:	0003023c 	.word	0x0003023c

000b60dc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b60dc:	b508      	push	{r3, lr}
   b60de:	4b02      	ldr	r3, [pc, #8]	; (b60e8 <hal_usart_peek+0xc>)
   b60e0:	681b      	ldr	r3, [r3, #0]
   b60e2:	699b      	ldr	r3, [r3, #24]
   b60e4:	9301      	str	r3, [sp, #4]
   b60e6:	bd08      	pop	{r3, pc}
   b60e8:	0003023c 	.word	0x0003023c

000b60ec <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b60ec:	b508      	push	{r3, lr}
   b60ee:	4b02      	ldr	r3, [pc, #8]	; (b60f8 <hal_usart_flush+0xc>)
   b60f0:	681b      	ldr	r3, [r3, #0]
   b60f2:	69db      	ldr	r3, [r3, #28]
   b60f4:	9301      	str	r3, [sp, #4]
   b60f6:	bd08      	pop	{r3, pc}
   b60f8:	0003023c 	.word	0x0003023c

000b60fc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b60fc:	b508      	push	{r3, lr}
   b60fe:	4b02      	ldr	r3, [pc, #8]	; (b6108 <hal_usart_is_enabled+0xc>)
   b6100:	681b      	ldr	r3, [r3, #0]
   b6102:	6a1b      	ldr	r3, [r3, #32]
   b6104:	9301      	str	r3, [sp, #4]
   b6106:	bd08      	pop	{r3, pc}
   b6108:	0003023c 	.word	0x0003023c

000b610c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b610c:	b508      	push	{r3, lr}
   b610e:	4b02      	ldr	r3, [pc, #8]	; (b6118 <hal_usart_available_data_for_write+0xc>)
   b6110:	681b      	ldr	r3, [r3, #0]
   b6112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6114:	9301      	str	r3, [sp, #4]
   b6116:	bd08      	pop	{r3, pc}
   b6118:	0003023c 	.word	0x0003023c

000b611c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b611c:	b508      	push	{r3, lr}
   b611e:	4b02      	ldr	r3, [pc, #8]	; (b6128 <hal_usart_init_ex+0xc>)
   b6120:	681b      	ldr	r3, [r3, #0]
   b6122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6124:	9301      	str	r3, [sp, #4]
   b6126:	bd08      	pop	{r3, pc}
   b6128:	0003023c 	.word	0x0003023c

000b612c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b612c:	b508      	push	{r3, lr}
   b612e:	4b02      	ldr	r3, [pc, #8]	; (b6138 <HAL_USB_USART_Init+0xc>)
   b6130:	681b      	ldr	r3, [r3, #0]
   b6132:	681b      	ldr	r3, [r3, #0]
   b6134:	9301      	str	r3, [sp, #4]
   b6136:	bd08      	pop	{r3, pc}
   b6138:	0003024c 	.word	0x0003024c

000b613c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b613c:	b508      	push	{r3, lr}
   b613e:	4b02      	ldr	r3, [pc, #8]	; (b6148 <HAL_USB_USART_Available_Data+0xc>)
   b6140:	681b      	ldr	r3, [r3, #0]
   b6142:	691b      	ldr	r3, [r3, #16]
   b6144:	9301      	str	r3, [sp, #4]
   b6146:	bd08      	pop	{r3, pc}
   b6148:	0003024c 	.word	0x0003024c

000b614c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b614c:	b508      	push	{r3, lr}
   b614e:	4b02      	ldr	r3, [pc, #8]	; (b6158 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6150:	681b      	ldr	r3, [r3, #0]
   b6152:	695b      	ldr	r3, [r3, #20]
   b6154:	9301      	str	r3, [sp, #4]
   b6156:	bd08      	pop	{r3, pc}
   b6158:	0003024c 	.word	0x0003024c

000b615c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b615c:	b508      	push	{r3, lr}
   b615e:	4b02      	ldr	r3, [pc, #8]	; (b6168 <HAL_USB_USART_Receive_Data+0xc>)
   b6160:	681b      	ldr	r3, [r3, #0]
   b6162:	699b      	ldr	r3, [r3, #24]
   b6164:	9301      	str	r3, [sp, #4]
   b6166:	bd08      	pop	{r3, pc}
   b6168:	0003024c 	.word	0x0003024c

000b616c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b616c:	b508      	push	{r3, lr}
   b616e:	4b02      	ldr	r3, [pc, #8]	; (b6178 <HAL_USB_USART_Send_Data+0xc>)
   b6170:	681b      	ldr	r3, [r3, #0]
   b6172:	69db      	ldr	r3, [r3, #28]
   b6174:	9301      	str	r3, [sp, #4]
   b6176:	bd08      	pop	{r3, pc}
   b6178:	0003024c 	.word	0x0003024c

000b617c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b617c:	b508      	push	{r3, lr}
   b617e:	4b02      	ldr	r3, [pc, #8]	; (b6188 <HAL_USB_USART_Flush_Data+0xc>)
   b6180:	681b      	ldr	r3, [r3, #0]
   b6182:	6a1b      	ldr	r3, [r3, #32]
   b6184:	9301      	str	r3, [sp, #4]
   b6186:	bd08      	pop	{r3, pc}
   b6188:	0003024c 	.word	0x0003024c

000b618c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b618c:	b508      	push	{r3, lr}
   b618e:	4b02      	ldr	r3, [pc, #8]	; (b6198 <panic_+0xc>)
   b6190:	681b      	ldr	r3, [r3, #0]
   b6192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6194:	9301      	str	r3, [sp, #4]
   b6196:	bd08      	pop	{r3, pc}
   b6198:	00030260 	.word	0x00030260

000b619c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b619c:	b508      	push	{r3, lr}
   b619e:	4b02      	ldr	r3, [pc, #8]	; (b61a8 <set_system_mode+0xc>)
   b61a0:	681b      	ldr	r3, [r3, #0]
   b61a2:	685b      	ldr	r3, [r3, #4]
   b61a4:	9301      	str	r3, [sp, #4]
   b61a6:	bd08      	pop	{r3, pc}
   b61a8:	00030220 	.word	0x00030220

000b61ac <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b61ac:	b508      	push	{r3, lr}
   b61ae:	4b02      	ldr	r3, [pc, #8]	; (b61b8 <system_delay_ms+0xc>)
   b61b0:	681b      	ldr	r3, [r3, #0]
   b61b2:	695b      	ldr	r3, [r3, #20]
   b61b4:	9301      	str	r3, [sp, #4]
   b61b6:	bd08      	pop	{r3, pc}
   b61b8:	00030220 	.word	0x00030220

000b61bc <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b61bc:	b508      	push	{r3, lr}
   b61be:	4b02      	ldr	r3, [pc, #8]	; (b61c8 <system_thread_set_state+0xc>)
   b61c0:	681b      	ldr	r3, [r3, #0]
   b61c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b61c4:	9301      	str	r3, [sp, #4]
   b61c6:	bd08      	pop	{r3, pc}
   b61c8:	00030220 	.word	0x00030220

000b61cc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b61cc:	b508      	push	{r3, lr}
   b61ce:	4b03      	ldr	r3, [pc, #12]	; (b61dc <system_ctrl_set_app_request_handler+0x10>)
   b61d0:	681b      	ldr	r3, [r3, #0]
   b61d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b61d6:	9301      	str	r3, [sp, #4]
   b61d8:	bd08      	pop	{r3, pc}
   b61da:	0000      	.short	0x0000
   b61dc:	00030220 	.word	0x00030220

000b61e0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b61e0:	b508      	push	{r3, lr}
   b61e2:	4b03      	ldr	r3, [pc, #12]	; (b61f0 <system_ctrl_set_result+0x10>)
   b61e4:	681b      	ldr	r3, [r3, #0]
   b61e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b61ea:	9301      	str	r3, [sp, #4]
   b61ec:	bd08      	pop	{r3, pc}
   b61ee:	0000      	.short	0x0000
   b61f0:	00030220 	.word	0x00030220

000b61f4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b61f4:	b508      	push	{r3, lr}
   b61f6:	4b02      	ldr	r3, [pc, #8]	; (b6200 <spark_set_random_seed_from_cloud_handler+0xc>)
   b61f8:	681b      	ldr	r3, [r3, #0]
   b61fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b61fc:	9301      	str	r3, [sp, #4]
   b61fe:	bd08      	pop	{r3, pc}
   b6200:	00030244 	.word	0x00030244

000b6204 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6204:	b508      	push	{r3, lr}
   b6206:	4b02      	ldr	r3, [pc, #8]	; (b6210 <network_connect+0xc>)
   b6208:	681b      	ldr	r3, [r3, #0]
   b620a:	685b      	ldr	r3, [r3, #4]
   b620c:	9301      	str	r3, [sp, #4]
   b620e:	bd08      	pop	{r3, pc}
   b6210:	00030240 	.word	0x00030240

000b6214 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6214:	b508      	push	{r3, lr}
   b6216:	4b02      	ldr	r3, [pc, #8]	; (b6220 <network_connecting+0xc>)
   b6218:	681b      	ldr	r3, [r3, #0]
   b621a:	689b      	ldr	r3, [r3, #8]
   b621c:	9301      	str	r3, [sp, #4]
   b621e:	bd08      	pop	{r3, pc}
   b6220:	00030240 	.word	0x00030240

000b6224 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6224:	b508      	push	{r3, lr}
   b6226:	4b02      	ldr	r3, [pc, #8]	; (b6230 <network_disconnect+0xc>)
   b6228:	681b      	ldr	r3, [r3, #0]
   b622a:	68db      	ldr	r3, [r3, #12]
   b622c:	9301      	str	r3, [sp, #4]
   b622e:	bd08      	pop	{r3, pc}
   b6230:	00030240 	.word	0x00030240

000b6234 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6234:	b508      	push	{r3, lr}
   b6236:	4b02      	ldr	r3, [pc, #8]	; (b6240 <network_ready+0xc>)
   b6238:	681b      	ldr	r3, [r3, #0]
   b623a:	691b      	ldr	r3, [r3, #16]
   b623c:	9301      	str	r3, [sp, #4]
   b623e:	bd08      	pop	{r3, pc}
   b6240:	00030240 	.word	0x00030240

000b6244 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6244:	b508      	push	{r3, lr}
   b6246:	4b02      	ldr	r3, [pc, #8]	; (b6250 <network_on+0xc>)
   b6248:	681b      	ldr	r3, [r3, #0]
   b624a:	695b      	ldr	r3, [r3, #20]
   b624c:	9301      	str	r3, [sp, #4]
   b624e:	bd08      	pop	{r3, pc}
   b6250:	00030240 	.word	0x00030240

000b6254 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6254:	b508      	push	{r3, lr}
   b6256:	4b02      	ldr	r3, [pc, #8]	; (b6260 <network_off+0xc>)
   b6258:	681b      	ldr	r3, [r3, #0]
   b625a:	699b      	ldr	r3, [r3, #24]
   b625c:	9301      	str	r3, [sp, #4]
   b625e:	bd08      	pop	{r3, pc}
   b6260:	00030240 	.word	0x00030240

000b6264 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6264:	b508      	push	{r3, lr}
   b6266:	4b02      	ldr	r3, [pc, #8]	; (b6270 <network_listen+0xc>)
   b6268:	681b      	ldr	r3, [r3, #0]
   b626a:	69db      	ldr	r3, [r3, #28]
   b626c:	9301      	str	r3, [sp, #4]
   b626e:	bd08      	pop	{r3, pc}
   b6270:	00030240 	.word	0x00030240

000b6274 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6274:	b508      	push	{r3, lr}
   b6276:	4b02      	ldr	r3, [pc, #8]	; (b6280 <network_listening+0xc>)
   b6278:	681b      	ldr	r3, [r3, #0]
   b627a:	6a1b      	ldr	r3, [r3, #32]
   b627c:	9301      	str	r3, [sp, #4]
   b627e:	bd08      	pop	{r3, pc}
   b6280:	00030240 	.word	0x00030240

000b6284 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6284:	b508      	push	{r3, lr}
   b6286:	4b02      	ldr	r3, [pc, #8]	; (b6290 <network_set_listen_timeout+0xc>)
   b6288:	681b      	ldr	r3, [r3, #0]
   b628a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b628c:	9301      	str	r3, [sp, #4]
   b628e:	bd08      	pop	{r3, pc}
   b6290:	00030240 	.word	0x00030240

000b6294 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6294:	b508      	push	{r3, lr}
   b6296:	4b02      	ldr	r3, [pc, #8]	; (b62a0 <network_get_listen_timeout+0xc>)
   b6298:	681b      	ldr	r3, [r3, #0]
   b629a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b629c:	9301      	str	r3, [sp, #4]
   b629e:	bd08      	pop	{r3, pc}
   b62a0:	00030240 	.word	0x00030240

000b62a4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b62a4:	b508      	push	{r3, lr}
   b62a6:	4b02      	ldr	r3, [pc, #8]	; (b62b0 <network_is_on+0xc>)
   b62a8:	681b      	ldr	r3, [r3, #0]
   b62aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b62ac:	9301      	str	r3, [sp, #4]
   b62ae:	bd08      	pop	{r3, pc}
   b62b0:	00030240 	.word	0x00030240

000b62b4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b62b4:	b508      	push	{r3, lr}
   b62b6:	4b02      	ldr	r3, [pc, #8]	; (b62c0 <network_is_off+0xc>)
   b62b8:	681b      	ldr	r3, [r3, #0]
   b62ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b62bc:	9301      	str	r3, [sp, #4]
   b62be:	bd08      	pop	{r3, pc}
   b62c0:	00030240 	.word	0x00030240

000b62c4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b62c4:	b508      	push	{r3, lr}
   b62c6:	4b02      	ldr	r3, [pc, #8]	; (b62d0 <malloc+0xc>)
   b62c8:	681b      	ldr	r3, [r3, #0]
   b62ca:	681b      	ldr	r3, [r3, #0]
   b62cc:	9301      	str	r3, [sp, #4]
   b62ce:	bd08      	pop	{r3, pc}
   b62d0:	0003021c 	.word	0x0003021c

000b62d4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b62d4:	b508      	push	{r3, lr}
   b62d6:	4b02      	ldr	r3, [pc, #8]	; (b62e0 <free+0xc>)
   b62d8:	681b      	ldr	r3, [r3, #0]
   b62da:	685b      	ldr	r3, [r3, #4]
   b62dc:	9301      	str	r3, [sp, #4]
   b62de:	bd08      	pop	{r3, pc}
   b62e0:	0003021c 	.word	0x0003021c

000b62e4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b62e4:	b508      	push	{r3, lr}
   b62e6:	4b02      	ldr	r3, [pc, #8]	; (b62f0 <vsnprintf+0xc>)
   b62e8:	681b      	ldr	r3, [r3, #0]
   b62ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b62ec:	9301      	str	r3, [sp, #4]
   b62ee:	bd08      	pop	{r3, pc}
   b62f0:	0003021c 	.word	0x0003021c

000b62f4 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b62f4:	b508      	push	{r3, lr}
   b62f6:	4b02      	ldr	r3, [pc, #8]	; (b6300 <__assert_func+0xc>)
   b62f8:	681b      	ldr	r3, [r3, #0]
   b62fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b62fc:	9301      	str	r3, [sp, #4]
   b62fe:	bd08      	pop	{r3, pc}
   b6300:	0003021c 	.word	0x0003021c

000b6304 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6304:	b508      	push	{r3, lr}
   b6306:	4b02      	ldr	r3, [pc, #8]	; (b6310 <newlib_impure_ptr_callback+0xc>)
   b6308:	681b      	ldr	r3, [r3, #0]
   b630a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b630c:	9301      	str	r3, [sp, #4]
   b630e:	bd08      	pop	{r3, pc}
   b6310:	0003021c 	.word	0x0003021c

000b6314 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6314:	2100      	movs	r1, #0
   b6316:	f7ff bf49 	b.w	b61ac <system_delay_ms>
	...

000b631c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b631c:	4802      	ldr	r0, [pc, #8]	; (b6328 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b631e:	2300      	movs	r3, #0
   b6320:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b6322:	f7ff bdc3 	b.w	b5eac <os_mutex_recursive_create>
   b6326:	bf00      	nop
   b6328:	2003e6c4 	.word	0x2003e6c4

000b632c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b632c:	2200      	movs	r2, #0
   b632e:	6840      	ldr	r0, [r0, #4]
   b6330:	4611      	mov	r1, r2
   b6332:	f7ff bf9f 	b.w	b6274 <network_listening>

000b6336 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6336:	2200      	movs	r2, #0
   b6338:	6840      	ldr	r0, [r0, #4]
   b633a:	4611      	mov	r1, r2
   b633c:	f7ff bfaa 	b.w	b6294 <network_get_listen_timeout>

000b6340 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6340:	6840      	ldr	r0, [r0, #4]
   b6342:	2200      	movs	r2, #0
   b6344:	f7ff bf9e 	b.w	b6284 <network_set_listen_timeout>

000b6348 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6348:	6840      	ldr	r0, [r0, #4]
   b634a:	2200      	movs	r2, #0
   b634c:	f081 0101 	eor.w	r1, r1, #1
   b6350:	f7ff bf88 	b.w	b6264 <network_listen>

000b6354 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6354:	2300      	movs	r3, #0
   b6356:	6840      	ldr	r0, [r0, #4]
   b6358:	461a      	mov	r2, r3
   b635a:	4619      	mov	r1, r3
   b635c:	f7ff bf7a 	b.w	b6254 <network_off>

000b6360 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6360:	2300      	movs	r3, #0
   b6362:	6840      	ldr	r0, [r0, #4]
   b6364:	461a      	mov	r2, r3
   b6366:	4619      	mov	r1, r3
   b6368:	f7ff bf6c 	b.w	b6244 <network_on>

000b636c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b636c:	2200      	movs	r2, #0
   b636e:	6840      	ldr	r0, [r0, #4]
   b6370:	4611      	mov	r1, r2
   b6372:	f7ff bf5f 	b.w	b6234 <network_ready>

000b6376 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6376:	2200      	movs	r2, #0
   b6378:	6840      	ldr	r0, [r0, #4]
   b637a:	4611      	mov	r1, r2
   b637c:	f7ff bf4a 	b.w	b6214 <network_connecting>

000b6380 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6380:	6840      	ldr	r0, [r0, #4]
   b6382:	2200      	movs	r2, #0
   b6384:	2102      	movs	r1, #2
   b6386:	f7ff bf4d 	b.w	b6224 <network_disconnect>

000b638a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b638a:	2300      	movs	r3, #0
   b638c:	6840      	ldr	r0, [r0, #4]
   b638e:	461a      	mov	r2, r3
   b6390:	f7ff bf38 	b.w	b6204 <network_connect>

000b6394 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6394:	4b02      	ldr	r3, [pc, #8]	; (b63a0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6396:	2203      	movs	r2, #3
   b6398:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b639a:	4a02      	ldr	r2, [pc, #8]	; (b63a4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b639c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b639e:	4770      	bx	lr
   b63a0:	2003e6c8 	.word	0x2003e6c8
   b63a4:	000b7db0 	.word	0x000b7db0

000b63a8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b63a8:	4770      	bx	lr

000b63aa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b63aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b63ac:	4606      	mov	r6, r0
   b63ae:	4615      	mov	r5, r2
   b63b0:	460c      	mov	r4, r1
   b63b2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b63b4:	42bc      	cmp	r4, r7
   b63b6:	d006      	beq.n	b63c6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b63b8:	6833      	ldr	r3, [r6, #0]
   b63ba:	f814 1b01 	ldrb.w	r1, [r4], #1
   b63be:	689b      	ldr	r3, [r3, #8]
   b63c0:	4630      	mov	r0, r6
   b63c2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b63c4:	e7f6      	b.n	b63b4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b63c6:	4628      	mov	r0, r5
   b63c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b63ca <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b63ca:	7c00      	ldrb	r0, [r0, #16]
   b63cc:	2200      	movs	r2, #0
   b63ce:	f7ff bddd 	b.w	b5f8c <hal_i2c_write>

000b63d2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b63d2:	7c00      	ldrb	r0, [r0, #16]
   b63d4:	2100      	movs	r1, #0
   b63d6:	f7ff bde1 	b.w	b5f9c <hal_i2c_available>

000b63da <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b63da:	7c00      	ldrb	r0, [r0, #16]
   b63dc:	2100      	movs	r1, #0
   b63de:	f7ff bde5 	b.w	b5fac <hal_i2c_read>

000b63e2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b63e2:	7c00      	ldrb	r0, [r0, #16]
   b63e4:	2100      	movs	r1, #0
   b63e6:	f7ff bde9 	b.w	b5fbc <hal_i2c_peek>

000b63ea <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b63ea:	7c00      	ldrb	r0, [r0, #16]
   b63ec:	2100      	movs	r1, #0
   b63ee:	f7ff bded 	b.w	b5fcc <hal_i2c_flush>

000b63f2 <_ZN7TwoWireD0Ev>:
   b63f2:	b510      	push	{r4, lr}
   b63f4:	2114      	movs	r1, #20
   b63f6:	4604      	mov	r4, r0
   b63f8:	f7fe fb0b 	bl	b4a12 <_ZdlPvj>
   b63fc:	4620      	mov	r0, r4
   b63fe:	bd10      	pop	{r4, pc}

000b6400 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6400:	b538      	push	{r3, r4, r5, lr}
   b6402:	4604      	mov	r4, r0
   b6404:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b640a:	2200      	movs	r2, #0
   b640c:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6410:	4b09      	ldr	r3, [pc, #36]	; (b6438 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b6412:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6414:	4608      	mov	r0, r1
   b6416:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b6418:	4629      	mov	r1, r5
   b641a:	f7ff fde7 	bl	b5fec <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b641e:	30bf      	adds	r0, #191	; 0xbf
   b6420:	d108      	bne.n	b6434 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b6422:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6424:	07db      	lsls	r3, r3, #31
   b6426:	d505      	bpl.n	b6434 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b6428:	6868      	ldr	r0, [r5, #4]
   b642a:	f7ff ff53 	bl	b62d4 <free>
    free(conf.tx_buffer);
   b642e:	68e8      	ldr	r0, [r5, #12]
   b6430:	f7ff ff50 	bl	b62d4 <free>
}
   b6434:	4620      	mov	r0, r4
   b6436:	bd38      	pop	{r3, r4, r5, pc}
   b6438:	000b7dec 	.word	0x000b7dec

000b643c <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b643c:	7c00      	ldrb	r0, [r0, #16]
   b643e:	2200      	movs	r2, #0
   b6440:	f7ff bd84 	b.w	b5f4c <hal_i2c_set_speed>

000b6444 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6444:	2300      	movs	r3, #0
   b6446:	7c00      	ldrb	r0, [r0, #16]
   b6448:	461a      	mov	r2, r3
   b644a:	4619      	mov	r1, r3
   b644c:	f7ff bd86 	b.w	b5f5c <hal_i2c_begin>

000b6450 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b6450:	7c00      	ldrb	r0, [r0, #16]
   b6452:	2200      	movs	r2, #0
   b6454:	f7ff bd8a 	b.w	b5f6c <hal_i2c_begin_transmission>

000b6458 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b6458:	b2c9      	uxtb	r1, r1
   b645a:	f7ff bff9 	b.w	b6450 <_ZN7TwoWire17beginTransmissionEh>

000b645e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b645e:	7c00      	ldrb	r0, [r0, #16]
   b6460:	2200      	movs	r2, #0
   b6462:	f7ff bd8b 	b.w	b5f7c <hal_i2c_end_transmission>

000b6466 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b6466:	2101      	movs	r1, #1
   b6468:	f7ff bff9 	b.w	b645e <_ZN7TwoWire15endTransmissionEh>

000b646c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b646c:	4770      	bx	lr

000b646e <_ZN9IPAddressD0Ev>:
   b646e:	b510      	push	{r4, lr}
   b6470:	2118      	movs	r1, #24
   b6472:	4604      	mov	r4, r0
   b6474:	f7fe facd 	bl	b4a12 <_ZdlPvj>
   b6478:	4620      	mov	r0, r4
   b647a:	bd10      	pop	{r4, pc}

000b647c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b647c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b647e:	7d03      	ldrb	r3, [r0, #20]
   b6480:	2b06      	cmp	r3, #6
{
   b6482:	b08d      	sub	sp, #52	; 0x34
   b6484:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6486:	f100 0704 	add.w	r7, r0, #4
   b648a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b648e:	d012      	beq.n	b64b6 <_ZNK9IPAddress7printToER5Print+0x3a>
   b6490:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6494:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6498:	220a      	movs	r2, #10
   b649a:	4630      	mov	r0, r6
   b649c:	f000 f95d 	bl	b675a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b64a0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b64a2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b64a4:	d019      	beq.n	b64da <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b64a6:	2c00      	cmp	r4, #0
   b64a8:	d0f4      	beq.n	b6494 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b64aa:	212e      	movs	r1, #46	; 0x2e
   b64ac:	4630      	mov	r0, r6
   b64ae:	f000 f93b 	bl	b6728 <_ZN5Print5printEc>
   b64b2:	4404      	add	r4, r0
   b64b4:	e7ee      	b.n	b6494 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b64b6:	232f      	movs	r3, #47	; 0x2f
   b64b8:	466a      	mov	r2, sp
   b64ba:	4639      	mov	r1, r7
   b64bc:	200a      	movs	r0, #10
		buf[0] = 0;
   b64be:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b64c2:	f7ff fd9b 	bl	b5ffc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b64c6:	4668      	mov	r0, sp
   b64c8:	f7fe fa5e 	bl	b4988 <strlen>
   b64cc:	6833      	ldr	r3, [r6, #0]
   b64ce:	4602      	mov	r2, r0
   b64d0:	68db      	ldr	r3, [r3, #12]
   b64d2:	4669      	mov	r1, sp
   b64d4:	4630      	mov	r0, r6
   b64d6:	4798      	blx	r3
   b64d8:	4604      	mov	r4, r0
    }
    return n;
}
   b64da:	4620      	mov	r0, r4
   b64dc:	b00d      	add	sp, #52	; 0x34
   b64de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b64e0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b64e0:	b510      	push	{r4, lr}
   b64e2:	4b05      	ldr	r3, [pc, #20]	; (b64f8 <_ZN9IPAddressC1Ev+0x18>)
   b64e4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b64e6:	2211      	movs	r2, #17
   b64e8:	f840 3b04 	str.w	r3, [r0], #4
   b64ec:	2100      	movs	r1, #0
   b64ee:	f000 fdff 	bl	b70f0 <memset>
}
   b64f2:	4620      	mov	r0, r4
   b64f4:	bd10      	pop	{r4, pc}
   b64f6:	bf00      	nop
   b64f8:	000b7e14 	.word	0x000b7e14

000b64fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b64fc:	4603      	mov	r3, r0
   b64fe:	4a07      	ldr	r2, [pc, #28]	; (b651c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6500:	b510      	push	{r4, lr}
   b6502:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6506:	f101 0210 	add.w	r2, r1, #16
   b650a:	f851 4b04 	ldr.w	r4, [r1], #4
   b650e:	f843 4b04 	str.w	r4, [r3], #4
   b6512:	4291      	cmp	r1, r2
   b6514:	d1f9      	bne.n	b650a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6516:	780a      	ldrb	r2, [r1, #0]
   b6518:	701a      	strb	r2, [r3, #0]
}
   b651a:	bd10      	pop	{r4, pc}
   b651c:	000b7e14 	.word	0x000b7e14

000b6520 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6520:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6522:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6526:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b652a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b652e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6532:	2304      	movs	r3, #4
   b6534:	6041      	str	r1, [r0, #4]
   b6536:	7503      	strb	r3, [r0, #20]
}
   b6538:	bd10      	pop	{r4, pc}
	...

000b653c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b653c:	b507      	push	{r0, r1, r2, lr}
   b653e:	4b06      	ldr	r3, [pc, #24]	; (b6558 <_ZN9IPAddressC1EPKh+0x1c>)
   b6540:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6542:	78cb      	ldrb	r3, [r1, #3]
   b6544:	9300      	str	r3, [sp, #0]
   b6546:	788b      	ldrb	r3, [r1, #2]
   b6548:	784a      	ldrb	r2, [r1, #1]
   b654a:	7809      	ldrb	r1, [r1, #0]
   b654c:	f7ff ffe8 	bl	b6520 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6550:	b003      	add	sp, #12
   b6552:	f85d fb04 	ldr.w	pc, [sp], #4
   b6556:	bf00      	nop
   b6558:	000b7e14 	.word	0x000b7e14

000b655c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b655c:	4b01      	ldr	r3, [pc, #4]	; (b6564 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b655e:	4a02      	ldr	r2, [pc, #8]	; (b6568 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6560:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b6562:	4770      	bx	lr
   b6564:	2003e6d0 	.word	0x2003e6d0
   b6568:	000b7e20 	.word	0x000b7e20

000b656c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b656c:	2300      	movs	r3, #0
   b656e:	6840      	ldr	r0, [r0, #4]
   b6570:	461a      	mov	r2, r3
   b6572:	f7ff be47 	b.w	b6204 <network_connect>

000b6576 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6576:	6840      	ldr	r0, [r0, #4]
   b6578:	2200      	movs	r2, #0
   b657a:	2102      	movs	r1, #2
   b657c:	f7ff be52 	b.w	b6224 <network_disconnect>

000b6580 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6580:	2200      	movs	r2, #0
   b6582:	6840      	ldr	r0, [r0, #4]
   b6584:	4611      	mov	r1, r2
   b6586:	f7ff be45 	b.w	b6214 <network_connecting>

000b658a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b658a:	2200      	movs	r2, #0
   b658c:	6840      	ldr	r0, [r0, #4]
   b658e:	4611      	mov	r1, r2
   b6590:	f7ff be50 	b.w	b6234 <network_ready>

000b6594 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6594:	2300      	movs	r3, #0
   b6596:	6840      	ldr	r0, [r0, #4]
   b6598:	461a      	mov	r2, r3
   b659a:	4619      	mov	r1, r3
   b659c:	f7ff be52 	b.w	b6244 <network_on>

000b65a0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b65a0:	2300      	movs	r3, #0
   b65a2:	6840      	ldr	r0, [r0, #4]
   b65a4:	461a      	mov	r2, r3
   b65a6:	4619      	mov	r1, r3
   b65a8:	f7ff be54 	b.w	b6254 <network_off>

000b65ac <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b65ac:	6840      	ldr	r0, [r0, #4]
   b65ae:	2100      	movs	r1, #0
   b65b0:	f7ff be78 	b.w	b62a4 <network_is_on>

000b65b4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b65b4:	6840      	ldr	r0, [r0, #4]
   b65b6:	2100      	movs	r1, #0
   b65b8:	f7ff be7c 	b.w	b62b4 <network_is_off>

000b65bc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b65bc:	6840      	ldr	r0, [r0, #4]
   b65be:	2200      	movs	r2, #0
   b65c0:	f081 0101 	eor.w	r1, r1, #1
   b65c4:	f7ff be4e 	b.w	b6264 <network_listen>

000b65c8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b65c8:	6840      	ldr	r0, [r0, #4]
   b65ca:	2200      	movs	r2, #0
   b65cc:	f7ff be5a 	b.w	b6284 <network_set_listen_timeout>

000b65d0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b65d0:	2200      	movs	r2, #0
   b65d2:	6840      	ldr	r0, [r0, #4]
   b65d4:	4611      	mov	r1, r2
   b65d6:	f7ff be5d 	b.w	b6294 <network_get_listen_timeout>

000b65da <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b65da:	2200      	movs	r2, #0
   b65dc:	6840      	ldr	r0, [r0, #4]
   b65de:	4611      	mov	r1, r2
   b65e0:	f7ff be48 	b.w	b6274 <network_listening>

000b65e4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b65e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b65e8:	b095      	sub	sp, #84	; 0x54
   b65ea:	4614      	mov	r4, r2
   b65ec:	460d      	mov	r5, r1
   b65ee:	4607      	mov	r7, r0
    IPAddress addr;
   b65f0:	f7ff ff76 	bl	b64e0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b65f4:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b65f6:	221c      	movs	r2, #28
   b65f8:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b65fa:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b65fc:	f000 fd78 	bl	b70f0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6600:	2340      	movs	r3, #64	; 0x40
   b6602:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6604:	4620      	mov	r0, r4
   b6606:	466b      	mov	r3, sp
   b6608:	aa0c      	add	r2, sp, #48	; 0x30
   b660a:	2100      	movs	r1, #0
   b660c:	f7ff fd06 	bl	b601c <netdb_getaddrinfo>
    if (!r) {
   b6610:	4604      	mov	r4, r0
   b6612:	2800      	cmp	r0, #0
   b6614:	d14b      	bne.n	b66ae <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6616:	4602      	mov	r2, r0
   b6618:	2101      	movs	r1, #1
   b661a:	6868      	ldr	r0, [r5, #4]
   b661c:	f7ff fe0a 	bl	b6234 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6620:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6622:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6624:	4622      	mov	r2, r4
   b6626:	6868      	ldr	r0, [r5, #4]
   b6628:	f7ff fe04 	bl	b6234 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b662c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b662e:	4681      	mov	r9, r0
        bool ok = false;
   b6630:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6632:	2e00      	cmp	r6, #0
   b6634:	d03b      	beq.n	b66ae <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6636:	2900      	cmp	r1, #0
   b6638:	d139      	bne.n	b66ae <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b663a:	6873      	ldr	r3, [r6, #4]
   b663c:	2b02      	cmp	r3, #2
   b663e:	d003      	beq.n	b6648 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6640:	2b0a      	cmp	r3, #10
   b6642:	d011      	beq.n	b6668 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6644:	69f6      	ldr	r6, [r6, #28]
   b6646:	e7f4      	b.n	b6632 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6648:	f1b8 0f00 	cmp.w	r8, #0
   b664c:	d0fa      	beq.n	b6644 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b664e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6650:	a806      	add	r0, sp, #24
   b6652:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6654:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6656:	f7ff ff71 	bl	b653c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b665a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b665c:	1d3c      	adds	r4, r7, #4
   b665e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6660:	682b      	ldr	r3, [r5, #0]
   b6662:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6664:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6666:	e7ed      	b.n	b6644 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6668:	f1b9 0f00 	cmp.w	r9, #0
   b666c:	d0ea      	beq.n	b6644 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b666e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6670:	2210      	movs	r2, #16
   b6672:	a801      	add	r0, sp, #4
   b6674:	f000 fd3c 	bl	b70f0 <memset>
                    a.v = 6;
   b6678:	2306      	movs	r3, #6
   b667a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b667e:	ad01      	add	r5, sp, #4
   b6680:	f104 0308 	add.w	r3, r4, #8
   b6684:	3418      	adds	r4, #24
   b6686:	6818      	ldr	r0, [r3, #0]
   b6688:	6859      	ldr	r1, [r3, #4]
   b668a:	462a      	mov	r2, r5
   b668c:	c203      	stmia	r2!, {r0, r1}
   b668e:	3308      	adds	r3, #8
   b6690:	42a3      	cmp	r3, r4
   b6692:	4615      	mov	r5, r2
   b6694:	d1f7      	bne.n	b6686 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6696:	a901      	add	r1, sp, #4
   b6698:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b669a:	ad07      	add	r5, sp, #28
   b669c:	f7ff ff2e 	bl	b64fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b66a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b66a2:	1d3c      	adds	r4, r7, #4
   b66a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b66a6:	682b      	ldr	r3, [r5, #0]
   b66a8:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b66aa:	4649      	mov	r1, r9
   b66ac:	e7ca      	b.n	b6644 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b66ae:	9800      	ldr	r0, [sp, #0]
   b66b0:	f7ff fcac 	bl	b600c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b66b4:	4638      	mov	r0, r7
   b66b6:	b015      	add	sp, #84	; 0x54
   b66b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b66bc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b66bc:	4b02      	ldr	r3, [pc, #8]	; (b66c8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b66be:	4a03      	ldr	r2, [pc, #12]	; (b66cc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b66c0:	601a      	str	r2, [r3, #0]
   b66c2:	2200      	movs	r2, #0
   b66c4:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b66c6:	4770      	bx	lr
   b66c8:	2003e6d4 	.word	0x2003e6d4
   b66cc:	000b7e2c 	.word	0x000b7e2c

000b66d0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b66d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b66d2:	4606      	mov	r6, r0
   b66d4:	460d      	mov	r5, r1
  size_t n = 0;
   b66d6:	188f      	adds	r7, r1, r2
   b66d8:	2400      	movs	r4, #0
  while (size--) {
   b66da:	42bd      	cmp	r5, r7
   b66dc:	d00c      	beq.n	b66f8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b66de:	6833      	ldr	r3, [r6, #0]
   b66e0:	f815 1b01 	ldrb.w	r1, [r5], #1
   b66e4:	689b      	ldr	r3, [r3, #8]
   b66e6:	4630      	mov	r0, r6
   b66e8:	4798      	blx	r3
     if (chunk>=0)
   b66ea:	1e03      	subs	r3, r0, #0
   b66ec:	db01      	blt.n	b66f2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b66ee:	441c      	add	r4, r3
  while (size--) {
   b66f0:	e7f3      	b.n	b66da <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b66f2:	2c00      	cmp	r4, #0
   b66f4:	bf08      	it	eq
   b66f6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b66f8:	4620      	mov	r0, r4
   b66fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b66fc <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b66fc:	b513      	push	{r0, r1, r4, lr}
   b66fe:	4604      	mov	r4, r0
    }
   b6700:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6702:	b159      	cbz	r1, b671c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6704:	9101      	str	r1, [sp, #4]
   b6706:	f7fe f93f 	bl	b4988 <strlen>
   b670a:	6823      	ldr	r3, [r4, #0]
   b670c:	9901      	ldr	r1, [sp, #4]
   b670e:	68db      	ldr	r3, [r3, #12]
   b6710:	4602      	mov	r2, r0
   b6712:	4620      	mov	r0, r4
    }
   b6714:	b002      	add	sp, #8
   b6716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b671a:	4718      	bx	r3
    }
   b671c:	b002      	add	sp, #8
   b671e:	bd10      	pop	{r4, pc}

000b6720 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b6720:	b508      	push	{r3, lr}
  return write(str);
   b6722:	f7ff ffeb 	bl	b66fc <_ZN5Print5writeEPKc>
}
   b6726:	bd08      	pop	{r3, pc}

000b6728 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b6728:	6803      	ldr	r3, [r0, #0]
   b672a:	689b      	ldr	r3, [r3, #8]
   b672c:	4718      	bx	r3

000b672e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b672e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6730:	210d      	movs	r1, #13
{
   b6732:	4605      	mov	r5, r0
  size_t n = print('\r');
   b6734:	f7ff fff8 	bl	b6728 <_ZN5Print5printEc>
  n += print('\n');
   b6738:	210a      	movs	r1, #10
  size_t n = print('\r');
   b673a:	4604      	mov	r4, r0
  n += print('\n');
   b673c:	4628      	mov	r0, r5
   b673e:	f7ff fff3 	bl	b6728 <_ZN5Print5printEc>
  return n;
}
   b6742:	4420      	add	r0, r4
   b6744:	bd38      	pop	{r3, r4, r5, pc}

000b6746 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b6746:	b538      	push	{r3, r4, r5, lr}
   b6748:	4605      	mov	r5, r0
  return write(str);
   b674a:	f7ff ffd7 	bl	b66fc <_ZN5Print5writeEPKc>
   b674e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b6750:	4628      	mov	r0, r5
   b6752:	f7ff ffec 	bl	b672e <_ZN5Print7printlnEv>
  return n;
}
   b6756:	4420      	add	r0, r4
   b6758:	bd38      	pop	{r3, r4, r5, pc}

000b675a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b675a:	b530      	push	{r4, r5, lr}
   b675c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b675e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6760:	2a01      	cmp	r2, #1
  *str = '\0';
   b6762:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b6766:	bf98      	it	ls
   b6768:	220a      	movls	r2, #10
   b676a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b676c:	460d      	mov	r5, r1
   b676e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6772:	fb01 5312 	mls	r3, r1, r2, r5
   b6776:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b677a:	2b09      	cmp	r3, #9
   b677c:	bf94      	ite	ls
   b677e:	3330      	addls	r3, #48	; 0x30
   b6780:	3337      	addhi	r3, #55	; 0x37
   b6782:	b2db      	uxtb	r3, r3
  } while(n);
   b6784:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6786:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b678a:	d9ef      	bls.n	b676c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b678c:	4621      	mov	r1, r4
   b678e:	f7ff ffb5 	bl	b66fc <_ZN5Print5writeEPKc>
}
   b6792:	b00b      	add	sp, #44	; 0x2c
   b6794:	bd30      	pop	{r4, r5, pc}
	...

000b6798 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b6798:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b679c:	ec55 4b10 	vmov	r4, r5, d0
   b67a0:	4606      	mov	r6, r0
   b67a2:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b67a4:	ee10 2a10 	vmov	r2, s0
   b67a8:	ee10 0a10 	vmov	r0, s0
   b67ac:	462b      	mov	r3, r5
   b67ae:	4629      	mov	r1, r5
   b67b0:	f7fe f88c 	bl	b48cc <__aeabi_dcmpun>
   b67b4:	b140      	cbz	r0, b67c8 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b67b6:	4953      	ldr	r1, [pc, #332]	; (b6904 <_ZN5Print10printFloatEdh+0x16c>)
   b67b8:	4630      	mov	r0, r6
   b67ba:	f7ff ff9f 	bl	b66fc <_ZN5Print5writeEPKc>
   b67be:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b67c0:	4650      	mov	r0, sl
   b67c2:	b003      	add	sp, #12
   b67c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b67c8:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b67cc:	4b4e      	ldr	r3, [pc, #312]	; (b6908 <_ZN5Print10printFloatEdh+0x170>)
   b67ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b67d2:	4620      	mov	r0, r4
   b67d4:	4649      	mov	r1, r9
   b67d6:	f7fe f879 	bl	b48cc <__aeabi_dcmpun>
   b67da:	b948      	cbnz	r0, b67f0 <_ZN5Print10printFloatEdh+0x58>
   b67dc:	4b4a      	ldr	r3, [pc, #296]	; (b6908 <_ZN5Print10printFloatEdh+0x170>)
   b67de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b67e2:	4620      	mov	r0, r4
   b67e4:	4649      	mov	r1, r9
   b67e6:	f7fe f853 	bl	b4890 <__aeabi_dcmple>
   b67ea:	b908      	cbnz	r0, b67f0 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b67ec:	4947      	ldr	r1, [pc, #284]	; (b690c <_ZN5Print10printFloatEdh+0x174>)
   b67ee:	e7e3      	b.n	b67b8 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b67f0:	4b47      	ldr	r3, [pc, #284]	; (b6910 <_ZN5Print10printFloatEdh+0x178>)
   b67f2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b67f6:	4620      	mov	r0, r4
   b67f8:	4629      	mov	r1, r5
   b67fa:	f7fe f85d 	bl	b48b8 <__aeabi_dcmpgt>
   b67fe:	b108      	cbz	r0, b6804 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b6800:	4944      	ldr	r1, [pc, #272]	; (b6914 <_ZN5Print10printFloatEdh+0x17c>)
   b6802:	e7d9      	b.n	b67b8 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b6804:	4b44      	ldr	r3, [pc, #272]	; (b6918 <_ZN5Print10printFloatEdh+0x180>)
   b6806:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b680a:	4620      	mov	r0, r4
   b680c:	4629      	mov	r1, r5
   b680e:	f7fe f835 	bl	b487c <__aeabi_dcmplt>
   b6812:	2800      	cmp	r0, #0
   b6814:	d1f4      	bne.n	b6800 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b6816:	2200      	movs	r2, #0
   b6818:	2300      	movs	r3, #0
   b681a:	4620      	mov	r0, r4
   b681c:	4629      	mov	r1, r5
   b681e:	f7fe f82d 	bl	b487c <__aeabi_dcmplt>
   b6822:	b1d0      	cbz	r0, b685a <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b6824:	212d      	movs	r1, #45	; 0x2d
   b6826:	4630      	mov	r0, r6
   b6828:	f7ff ff7e 	bl	b6728 <_ZN5Print5printEc>
     number = -number;
   b682c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b6830:	4682      	mov	sl, r0
     number = -number;
   b6832:	461d      	mov	r5, r3
  double rounding = 0.5;
   b6834:	4939      	ldr	r1, [pc, #228]	; (b691c <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b6836:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b6924 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b683a:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b683e:	2000      	movs	r0, #0
    rounding /= 10.0;
   b6840:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b6844:	fa5f f38b 	uxtb.w	r3, fp
   b6848:	429f      	cmp	r7, r3
   b684a:	d908      	bls.n	b685e <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b684c:	4642      	mov	r2, r8
   b684e:	464b      	mov	r3, r9
   b6850:	f7fd fecc 	bl	b45ec <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b6854:	f10b 0b01 	add.w	fp, fp, #1
   b6858:	e7f4      	b.n	b6844 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b685a:	4682      	mov	sl, r0
   b685c:	e7ea      	b.n	b6834 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b685e:	4622      	mov	r2, r4
   b6860:	462b      	mov	r3, r5
   b6862:	f7fd fbe3 	bl	b402c <__adddf3>
   b6866:	460d      	mov	r5, r1
   b6868:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b686a:	f7fe f86d 	bl	b4948 <__aeabi_d2uiz>
   b686e:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b6870:	f7fd fd18 	bl	b42a4 <__aeabi_ui2d>
   b6874:	4602      	mov	r2, r0
   b6876:	460b      	mov	r3, r1
   b6878:	4620      	mov	r0, r4
   b687a:	4629      	mov	r1, r5
   b687c:	f7fd fbd4 	bl	b4028 <__aeabi_dsub>
        return printNumber(val, base) + t;
   b6880:	220a      	movs	r2, #10
   b6882:	4604      	mov	r4, r0
   b6884:	460d      	mov	r5, r1
   b6886:	4630      	mov	r0, r6
   b6888:	4641      	mov	r1, r8
   b688a:	f7ff ff66 	bl	b675a <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b688e:	4482      	add	sl, r0
  if (digits > 0) {
   b6890:	2f00      	cmp	r7, #0
   b6892:	d095      	beq.n	b67c0 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b6894:	4922      	ldr	r1, [pc, #136]	; (b6920 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b6896:	f8df 908c 	ldr.w	r9, [pc, #140]	; b6924 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b689a:	4630      	mov	r0, r6
   b689c:	f7ff ff2e 	bl	b66fc <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b68a0:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b68a4:	4482      	add	sl, r0
  while (digits-- > 0)
   b68a6:	2f00      	cmp	r7, #0
   b68a8:	d08a      	beq.n	b67c0 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b68aa:	4642      	mov	r2, r8
   b68ac:	464b      	mov	r3, r9
   b68ae:	4620      	mov	r0, r4
   b68b0:	4629      	mov	r1, r5
   b68b2:	f7fd fd71 	bl	b4398 <__aeabi_dmul>
   b68b6:	4604      	mov	r4, r0
   b68b8:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b68ba:	f7fe f81d 	bl	b48f8 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b68be:	f1b0 0b00 	subs.w	fp, r0, #0
   b68c2:	da1c      	bge.n	b68fe <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b68c4:	212d      	movs	r1, #45	; 0x2d
   b68c6:	4630      	mov	r0, r6
   b68c8:	f7ff ff2e 	bl	b6728 <_ZN5Print5printEc>
            val = -n;
   b68cc:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b68d0:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b68d2:	220a      	movs	r2, #10
   b68d4:	4630      	mov	r0, r6
   b68d6:	9301      	str	r3, [sp, #4]
   b68d8:	f7ff ff3f 	bl	b675a <_ZN5Print11printNumberEmh>
   b68dc:	9b01      	ldr	r3, [sp, #4]
   b68de:	4418      	add	r0, r3
    n += print(toPrint);
   b68e0:	4482      	add	sl, r0
    remainder -= toPrint;
   b68e2:	4658      	mov	r0, fp
   b68e4:	f7fd fcee 	bl	b42c4 <__aeabi_i2d>
   b68e8:	4602      	mov	r2, r0
   b68ea:	460b      	mov	r3, r1
   b68ec:	4620      	mov	r0, r4
   b68ee:	4629      	mov	r1, r5
   b68f0:	f7fd fb9a 	bl	b4028 <__aeabi_dsub>
   b68f4:	3f01      	subs	r7, #1
   b68f6:	4604      	mov	r4, r0
   b68f8:	460d      	mov	r5, r1
   b68fa:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b68fc:	e7d3      	b.n	b68a6 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b68fe:	4659      	mov	r1, fp
        size_t t = 0;
   b6900:	2300      	movs	r3, #0
   b6902:	e7e6      	b.n	b68d2 <_ZN5Print10printFloatEdh+0x13a>
   b6904:	000b7e60 	.word	0x000b7e60
   b6908:	7fefffff 	.word	0x7fefffff
   b690c:	000b7e64 	.word	0x000b7e64
   b6910:	41efffff 	.word	0x41efffff
   b6914:	000b7e68 	.word	0x000b7e68
   b6918:	c1efffff 	.word	0xc1efffff
   b691c:	3fe00000 	.word	0x3fe00000
   b6920:	000b7e6c 	.word	0x000b7e6c
   b6924:	40240000 	.word	0x40240000

000b6928 <_ZN5Print7printlnEdi>:
{
   b6928:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   b692a:	b2c9      	uxtb	r1, r1
{
   b692c:	4605      	mov	r5, r0
  return printFloat(n, digits);
   b692e:	f7ff ff33 	bl	b6798 <_ZN5Print10printFloatEdh>
   b6932:	4604      	mov	r4, r0
  n += println();
   b6934:	4628      	mov	r0, r5
   b6936:	f7ff fefa 	bl	b672e <_ZN5Print7printlnEv>
}
   b693a:	4420      	add	r0, r4
   b693c:	bd38      	pop	{r3, r4, r5, pc}

000b693e <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b693e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6942:	b086      	sub	sp, #24
   b6944:	af00      	add	r7, sp, #0
   b6946:	4605      	mov	r5, r0
   b6948:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b694a:	1d38      	adds	r0, r7, #4
   b694c:	2114      	movs	r1, #20
{
   b694e:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6950:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b6952:	f7ff fcc7 	bl	b62e4 <vsnprintf>

    if (n<bufsize)
   b6956:	2813      	cmp	r0, #19
   b6958:	d80e      	bhi.n	b6978 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b695a:	1d39      	adds	r1, r7, #4
   b695c:	4628      	mov	r0, r5
   b695e:	f7ff fecd 	bl	b66fc <_ZN5Print5writeEPKc>
   b6962:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6964:	b11e      	cbz	r6, b696e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b6966:	4628      	mov	r0, r5
   b6968:	f7ff fee1 	bl	b672e <_ZN5Print7printlnEv>
   b696c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b696e:	4620      	mov	r0, r4
   b6970:	3718      	adds	r7, #24
   b6972:	46bd      	mov	sp, r7
   b6974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6978:	f100 0308 	add.w	r3, r0, #8
   b697c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6980:	46e8      	mov	r8, sp
        char bigger[n+1];
   b6982:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b6986:	4622      	mov	r2, r4
   b6988:	1c41      	adds	r1, r0, #1
   b698a:	683b      	ldr	r3, [r7, #0]
   b698c:	4668      	mov	r0, sp
   b698e:	f7ff fca9 	bl	b62e4 <vsnprintf>
  return write(str);
   b6992:	4669      	mov	r1, sp
   b6994:	4628      	mov	r0, r5
   b6996:	f7ff feb1 	bl	b66fc <_ZN5Print5writeEPKc>
   b699a:	4604      	mov	r4, r0
   b699c:	46c5      	mov	sp, r8
   b699e:	e7e1      	b.n	b6964 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b69a0 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b69a0:	4b01      	ldr	r3, [pc, #4]	; (b69a8 <_GLOBAL__sub_I_RGB+0x8>)
   b69a2:	2200      	movs	r2, #0
   b69a4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b69a6:	4770      	bx	lr
   b69a8:	2003e6dc 	.word	0x2003e6dc

000b69ac <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b69ac:	2100      	movs	r1, #0
   b69ae:	f7ff bb75 	b.w	b609c <hal_spi_release>

000b69b2 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b69b2:	2100      	movs	r1, #0
   b69b4:	f7ff bb6a 	b.w	b608c <hal_spi_acquire>

000b69b8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b69b8:	b510      	push	{r4, lr}
   b69ba:	4604      	mov	r4, r0
   b69bc:	4608      	mov	r0, r1
{
    _spi = spi;
   b69be:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b69c0:	f7ff fb44 	bl	b604c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b69c4:	2300      	movs	r3, #0
   b69c6:	6063      	str	r3, [r4, #4]
}
   b69c8:	4620      	mov	r0, r4
   b69ca:	bd10      	pop	{r4, pc}

000b69cc <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b69cc:	b513      	push	{r0, r1, r4, lr}
   b69ce:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b69d0:	7800      	ldrb	r0, [r0, #0]
   b69d2:	f7ff ffee 	bl	b69b2 <_ZN8SPIClass4lockEv.isra.0>
   b69d6:	b958      	cbnz	r0, b69f0 <_ZN8SPIClass5beginEv+0x24>
   b69d8:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b69da:	9001      	str	r0, [sp, #4]
   b69dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b69e0:	f7ff fb24 	bl	b602c <hal_spi_begin>
        unlock();
   b69e4:	9801      	ldr	r0, [sp, #4]
    }
}
   b69e6:	b002      	add	sp, #8
   b69e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b69ec:	f7ff bfde 	b.w	b69ac <_ZN8SPIClass6unlockEv.isra.0>
   b69f0:	b002      	add	sp, #8
   b69f2:	bd10      	pop	{r4, pc}

000b69f4 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b69f4:	7800      	ldrb	r0, [r0, #0]
   b69f6:	f7ff bfd9 	b.w	b69ac <_ZN8SPIClass6unlockEv.isra.0>
	...

000b69fc <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b69fc:	0840      	lsrs	r0, r0, #1
{
   b69fe:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b6a00:	6018      	str	r0, [r3, #0]
   b6a02:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b6a04:	6818      	ldr	r0, [r3, #0]
   b6a06:	4288      	cmp	r0, r1
   b6a08:	b2e5      	uxtb	r5, r4
   b6a0a:	d906      	bls.n	b6a1a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b6a0c:	3401      	adds	r4, #1
   b6a0e:	2c08      	cmp	r4, #8
   b6a10:	d002      	beq.n	b6a18 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b6a12:	0840      	lsrs	r0, r0, #1
   b6a14:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b6a16:	e7f5      	b.n	b6a04 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b6a18:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b6a1a:	4b02      	ldr	r3, [pc, #8]	; (b6a24 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b6a1c:	5d5b      	ldrb	r3, [r3, r5]
   b6a1e:	7013      	strb	r3, [r2, #0]
}
   b6a20:	bd30      	pop	{r4, r5, pc}
   b6a22:	bf00      	nop
   b6a24:	000b7e6e 	.word	0x000b7e6e

000b6a28 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b6a28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6a2c:	4606      	mov	r6, r0
   b6a2e:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b6a30:	7800      	ldrb	r0, [r0, #0]
{
   b6a32:	460c      	mov	r4, r1
    CHECK(lock());
   b6a34:	f7ff ffbd 	bl	b69b2 <_ZN8SPIClass4lockEv.isra.0>
   b6a38:	2800      	cmp	r0, #0
   b6a3a:	db1b      	blt.n	b6a74 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b6a3c:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b6a3e:	2214      	movs	r2, #20
   b6a40:	2100      	movs	r1, #0
   b6a42:	a809      	add	r0, sp, #36	; 0x24
   b6a44:	f000 fb54 	bl	b70f0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b6a48:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b6a4a:	2200      	movs	r2, #0
   b6a4c:	a909      	add	r1, sp, #36	; 0x24
   b6a4e:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b6a50:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b6a54:	f7ff fb0a 	bl	b606c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b6a58:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b6a5c:	b113      	cbz	r3, b6a64 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b6a5e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b6a62:	b155      	cbz	r5, b6a7a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b6a64:	2700      	movs	r7, #0
   b6a66:	46b9      	mov	r9, r7
   b6a68:	46b8      	mov	r8, r7
   b6a6a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b6a6c:	7923      	ldrb	r3, [r4, #4]
   b6a6e:	b15d      	cbz	r5, b6a88 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b6a70:	b1c3      	cbz	r3, b6aa4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b6a72:	2000      	movs	r0, #0
}
   b6a74:	b00f      	add	sp, #60	; 0x3c
   b6a76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b6a7a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b6a7e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b6a82:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b6a86:	e7f1      	b.n	b6a6c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b6a88:	2b00      	cmp	r3, #0
   b6a8a:	d135      	bne.n	b6af8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b6a8c:	68a3      	ldr	r3, [r4, #8]
   b6a8e:	4543      	cmp	r3, r8
   b6a90:	d108      	bne.n	b6aa4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b6a92:	f88d 9020 	strb.w	r9, [sp, #32]
   b6a96:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6a9a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b6a9e:	89a3      	ldrh	r3, [r4, #12]
   b6aa0:	429a      	cmp	r2, r3
   b6aa2:	d0e6      	beq.n	b6a72 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b6aa4:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6aa6:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b6aa8:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6aac:	980a      	ldr	r0, [sp, #40]	; 0x28
   b6aae:	ab04      	add	r3, sp, #16
   b6ab0:	f10d 020f 	add.w	r2, sp, #15
   b6ab4:	f7ff ffa2 	bl	b69fc <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b6ab8:	7921      	ldrb	r1, [r4, #4]
   b6aba:	b985      	cbnz	r5, b6ade <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b6abc:	b989      	cbnz	r1, b6ae2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b6abe:	68a3      	ldr	r3, [r4, #8]
   b6ac0:	4543      	cmp	r3, r8
   b6ac2:	d30e      	bcc.n	b6ae2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b6ac4:	f88d 9020 	strb.w	r9, [sp, #32]
   b6ac8:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6acc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b6ad0:	89a3      	ldrh	r3, [r4, #12]
   b6ad2:	429a      	cmp	r2, r3
   b6ad4:	d105      	bne.n	b6ae2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b6ad6:	9b04      	ldr	r3, [sp, #16]
   b6ad8:	4543      	cmp	r3, r8
   b6ada:	d102      	bne.n	b6ae2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b6adc:	e7c9      	b.n	b6a72 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b6ade:	2900      	cmp	r1, #0
   b6ae0:	d1f9      	bne.n	b6ad6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b6ae2:	2300      	movs	r3, #0
   b6ae4:	9301      	str	r3, [sp, #4]
   b6ae6:	7b63      	ldrb	r3, [r4, #13]
   b6ae8:	9300      	str	r3, [sp, #0]
   b6aea:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b6aee:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b6af0:	7830      	ldrb	r0, [r6, #0]
   b6af2:	f7ff fac3 	bl	b607c <hal_spi_set_settings>
   b6af6:	e7bc      	b.n	b6a72 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b6af8:	e9cd 5500 	strd	r5, r5, [sp]
   b6afc:	462b      	mov	r3, r5
   b6afe:	462a      	mov	r2, r5
   b6b00:	2101      	movs	r1, #1
   b6b02:	e7f5      	b.n	b6af0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b6b04 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b6b04:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b6b06:	7800      	ldrb	r0, [r0, #0]
   b6b08:	f7ff fa98 	bl	b603c <hal_spi_transfer>
}
   b6b0c:	b2c0      	uxtb	r0, r0
   b6b0e:	bd08      	pop	{r3, pc}

000b6b10 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6b10:	4b05      	ldr	r3, [pc, #20]	; (b6b28 <_GLOBAL__sub_I_System+0x18>)
   b6b12:	2202      	movs	r2, #2
   b6b14:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6b16:	4b05      	ldr	r3, [pc, #20]	; (b6b2c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6b18:	4a05      	ldr	r2, [pc, #20]	; (b6b30 <_GLOBAL__sub_I_System+0x20>)
   b6b1a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6b1c:	2000      	movs	r0, #0
   b6b1e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6b22:	f7ff bb3b 	b.w	b619c <set_system_mode>
   b6b26:	bf00      	nop
   b6b28:	2003e6f8 	.word	0x2003e6f8
   b6b2c:	2003e6ec 	.word	0x2003e6ec
   b6b30:	ffff0000 	.word	0xffff0000

000b6b34 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6b34:	4b02      	ldr	r3, [pc, #8]	; (b6b40 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b6b36:	681a      	ldr	r2, [r3, #0]
   b6b38:	4b02      	ldr	r3, [pc, #8]	; (b6b44 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b6b3a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6b3c:	4770      	bx	lr
   b6b3e:	bf00      	nop
   b6b40:	2003e5d0 	.word	0x2003e5d0
   b6b44:	2003e6fc 	.word	0x2003e6fc

000b6b48 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6b48:	4770      	bx	lr

000b6b4a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6b4a:	7441      	strb	r1, [r0, #17]
}
   b6b4c:	4770      	bx	lr

000b6b4e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6b4e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6b50:	7c00      	ldrb	r0, [r0, #16]
   b6b52:	f7ff fadb 	bl	b610c <hal_usart_available_data_for_write>
}
   b6b56:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6b5a:	bd08      	pop	{r3, pc}

000b6b5c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6b5c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6b5e:	7c00      	ldrb	r0, [r0, #16]
   b6b60:	f7ff faac 	bl	b60bc <hal_usart_available>
}
   b6b64:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6b68:	bd08      	pop	{r3, pc}

000b6b6a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6b6a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6b6c:	7c00      	ldrb	r0, [r0, #16]
   b6b6e:	f7ff fab5 	bl	b60dc <hal_usart_peek>
}
   b6b72:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6b76:	bd08      	pop	{r3, pc}

000b6b78 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6b78:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6b7a:	7c00      	ldrb	r0, [r0, #16]
   b6b7c:	f7ff faa6 	bl	b60cc <hal_usart_read>
}
   b6b80:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6b84:	bd08      	pop	{r3, pc}

000b6b86 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6b86:	7c00      	ldrb	r0, [r0, #16]
   b6b88:	f7ff bab0 	b.w	b60ec <hal_usart_flush>

000b6b8c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6b8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6b8e:	7c45      	ldrb	r5, [r0, #17]
{
   b6b90:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6b92:	b12d      	cbz	r5, b6ba0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6b94:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6b96:	b003      	add	sp, #12
   b6b98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6b9c:	f7ff ba86 	b.w	b60ac <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6ba0:	7c00      	ldrb	r0, [r0, #16]
   b6ba2:	9101      	str	r1, [sp, #4]
   b6ba4:	f7ff fab2 	bl	b610c <hal_usart_available_data_for_write>
   b6ba8:	2800      	cmp	r0, #0
   b6baa:	9901      	ldr	r1, [sp, #4]
   b6bac:	dcf2      	bgt.n	b6b94 <_ZN11USARTSerial5writeEh+0x8>
}
   b6bae:	4628      	mov	r0, r5
   b6bb0:	b003      	add	sp, #12
   b6bb2:	bd30      	pop	{r4, r5, pc}

000b6bb4 <_ZN11USARTSerialD0Ev>:
   b6bb4:	b510      	push	{r4, lr}
   b6bb6:	2114      	movs	r1, #20
   b6bb8:	4604      	mov	r4, r0
   b6bba:	f7fd ff2a 	bl	b4a12 <_ZdlPvj>
   b6bbe:	4620      	mov	r0, r4
   b6bc0:	bd10      	pop	{r4, pc}
	...

000b6bc4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6bc4:	b510      	push	{r4, lr}
   b6bc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6bca:	4604      	mov	r4, r0
   b6bcc:	4608      	mov	r0, r1
   b6bce:	4611      	mov	r1, r2
   b6bd0:	2200      	movs	r2, #0
   b6bd2:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6bd6:	4b04      	ldr	r3, [pc, #16]	; (b6be8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6bd8:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6bda:	2301      	movs	r3, #1
  _serial = serial;
   b6bdc:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6bde:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6be0:	f7ff fa9c 	bl	b611c <hal_usart_init_ex>
}
   b6be4:	4620      	mov	r0, r4
   b6be6:	bd10      	pop	{r4, pc}
   b6be8:	000b7e9c 	.word	0x000b7e9c

000b6bec <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6bec:	7441      	strb	r1, [r0, #17]
}
   b6bee:	4770      	bx	lr

000b6bf0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6bf0:	4770      	bx	lr

000b6bf2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6bf2:	4770      	bx	lr

000b6bf4 <_ZN9USBSerial4readEv>:
{
   b6bf4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6bf6:	2100      	movs	r1, #0
   b6bf8:	7c00      	ldrb	r0, [r0, #16]
   b6bfa:	f7ff faaf 	bl	b615c <HAL_USB_USART_Receive_Data>
}
   b6bfe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6c02:	bd08      	pop	{r3, pc}

000b6c04 <_ZN9USBSerial4peekEv>:
{
   b6c04:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6c06:	2101      	movs	r1, #1
   b6c08:	7c00      	ldrb	r0, [r0, #16]
   b6c0a:	f7ff faa7 	bl	b615c <HAL_USB_USART_Receive_Data>
}
   b6c0e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6c12:	bd08      	pop	{r3, pc}

000b6c14 <_ZN9USBSerial17availableForWriteEv>:
{
   b6c14:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b6c16:	7c00      	ldrb	r0, [r0, #16]
   b6c18:	f7ff fa98 	bl	b614c <HAL_USB_USART_Available_Data_For_Write>
}
   b6c1c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6c20:	bd08      	pop	{r3, pc}

000b6c22 <_ZN9USBSerial9availableEv>:
{
   b6c22:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6c24:	7c00      	ldrb	r0, [r0, #16]
   b6c26:	f7ff fa89 	bl	b613c <HAL_USB_USART_Available_Data>
}
   b6c2a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6c2e:	bd08      	pop	{r3, pc}

000b6c30 <_ZN9USBSerial5writeEh>:
{
   b6c30:	b513      	push	{r0, r1, r4, lr}
   b6c32:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6c34:	7c00      	ldrb	r0, [r0, #16]
{
   b6c36:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6c38:	f7ff fa88 	bl	b614c <HAL_USB_USART_Available_Data_For_Write>
   b6c3c:	2800      	cmp	r0, #0
   b6c3e:	9901      	ldr	r1, [sp, #4]
   b6c40:	dc01      	bgt.n	b6c46 <_ZN9USBSerial5writeEh+0x16>
   b6c42:	7c60      	ldrb	r0, [r4, #17]
   b6c44:	b120      	cbz	r0, b6c50 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6c46:	7c20      	ldrb	r0, [r4, #16]
   b6c48:	f7ff fa90 	bl	b616c <HAL_USB_USART_Send_Data>
   b6c4c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6c50:	b002      	add	sp, #8
   b6c52:	bd10      	pop	{r4, pc}

000b6c54 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6c54:	7c00      	ldrb	r0, [r0, #16]
   b6c56:	f7ff ba91 	b.w	b617c <HAL_USB_USART_Flush_Data>

000b6c5a <_ZN9USBSerialD0Ev>:
   b6c5a:	b510      	push	{r4, lr}
   b6c5c:	2114      	movs	r1, #20
   b6c5e:	4604      	mov	r4, r0
   b6c60:	f7fd fed7 	bl	b4a12 <_ZdlPvj>
   b6c64:	4620      	mov	r0, r4
   b6c66:	bd10      	pop	{r4, pc}

000b6c68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6c68:	b510      	push	{r4, lr}
   b6c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6c6e:	4604      	mov	r4, r0
   b6c70:	4608      	mov	r0, r1
   b6c72:	2100      	movs	r1, #0
   b6c74:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6c78:	4b04      	ldr	r3, [pc, #16]	; (b6c8c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6c7a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6c7c:	2301      	movs	r3, #1
  _serial = serial;
   b6c7e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6c80:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6c82:	4611      	mov	r1, r2
   b6c84:	f7ff fa52 	bl	b612c <HAL_USB_USART_Init>
}
   b6c88:	4620      	mov	r0, r4
   b6c8a:	bd10      	pop	{r4, pc}
   b6c8c:	000b7ecc 	.word	0x000b7ecc

000b6c90 <_Z19acquireSerialBufferv>:
{
   b6c90:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6c92:	2214      	movs	r2, #20
{
   b6c94:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6c96:	2100      	movs	r1, #0
   b6c98:	f000 fa2a 	bl	b70f0 <memset>
}
   b6c9c:	4620      	mov	r0, r4
   b6c9e:	bd10      	pop	{r4, pc}

000b6ca0 <_Z16_fetch_usbserialv>:
{
   b6ca0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6ca2:	4c0f      	ldr	r4, [pc, #60]	; (b6ce0 <_Z16_fetch_usbserialv+0x40>)
{
   b6ca4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b6ca6:	a803      	add	r0, sp, #12
   b6ca8:	f7ff fff2 	bl	b6c90 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6cac:	7821      	ldrb	r1, [r4, #0]
   b6cae:	f3bf 8f5b 	dmb	ish
   b6cb2:	f011 0101 	ands.w	r1, r1, #1
   b6cb6:	d10f      	bne.n	b6cd8 <_Z16_fetch_usbserialv+0x38>
   b6cb8:	4620      	mov	r0, r4
   b6cba:	9101      	str	r1, [sp, #4]
   b6cbc:	f7fd feb8 	bl	b4a30 <__cxa_guard_acquire>
   b6cc0:	9901      	ldr	r1, [sp, #4]
   b6cc2:	b148      	cbz	r0, b6cd8 <_Z16_fetch_usbserialv+0x38>
   b6cc4:	aa03      	add	r2, sp, #12
   b6cc6:	4807      	ldr	r0, [pc, #28]	; (b6ce4 <_Z16_fetch_usbserialv+0x44>)
   b6cc8:	f7ff ffce 	bl	b6c68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6ccc:	4620      	mov	r0, r4
   b6cce:	f7fd feb4 	bl	b4a3a <__cxa_guard_release>
   b6cd2:	4805      	ldr	r0, [pc, #20]	; (b6ce8 <_Z16_fetch_usbserialv+0x48>)
   b6cd4:	f000 f9f8 	bl	b70c8 <atexit>
	return _usbserial;
}
   b6cd8:	4802      	ldr	r0, [pc, #8]	; (b6ce4 <_Z16_fetch_usbserialv+0x44>)
   b6cda:	b008      	add	sp, #32
   b6cdc:	bd10      	pop	{r4, pc}
   b6cde:	bf00      	nop
   b6ce0:	2003e700 	.word	0x2003e700
   b6ce4:	2003e704 	.word	0x2003e704
   b6ce8:	000b6bf1 	.word	0x000b6bf1

000b6cec <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6cec:	2200      	movs	r2, #0
   b6cee:	6840      	ldr	r0, [r0, #4]
   b6cf0:	4611      	mov	r1, r2
   b6cf2:	f7ff ba9f 	b.w	b6234 <network_ready>

000b6cf6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6cf6:	2200      	movs	r2, #0
   b6cf8:	6840      	ldr	r0, [r0, #4]
   b6cfa:	4611      	mov	r1, r2
   b6cfc:	f7ff baba 	b.w	b6274 <network_listening>

000b6d00 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6d00:	2200      	movs	r2, #0
   b6d02:	6840      	ldr	r0, [r0, #4]
   b6d04:	4611      	mov	r1, r2
   b6d06:	f7ff bac5 	b.w	b6294 <network_get_listen_timeout>

000b6d0a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6d0a:	6840      	ldr	r0, [r0, #4]
   b6d0c:	2200      	movs	r2, #0
   b6d0e:	f7ff bab9 	b.w	b6284 <network_set_listen_timeout>

000b6d12 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6d12:	6840      	ldr	r0, [r0, #4]
   b6d14:	2200      	movs	r2, #0
   b6d16:	f081 0101 	eor.w	r1, r1, #1
   b6d1a:	f7ff baa3 	b.w	b6264 <network_listen>

000b6d1e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6d1e:	2300      	movs	r3, #0
   b6d20:	6840      	ldr	r0, [r0, #4]
   b6d22:	461a      	mov	r2, r3
   b6d24:	4619      	mov	r1, r3
   b6d26:	f7ff ba95 	b.w	b6254 <network_off>

000b6d2a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6d2a:	2300      	movs	r3, #0
   b6d2c:	6840      	ldr	r0, [r0, #4]
   b6d2e:	461a      	mov	r2, r3
   b6d30:	4619      	mov	r1, r3
   b6d32:	f7ff ba87 	b.w	b6244 <network_on>

000b6d36 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6d36:	2200      	movs	r2, #0
   b6d38:	6840      	ldr	r0, [r0, #4]
   b6d3a:	4611      	mov	r1, r2
   b6d3c:	f7ff ba6a 	b.w	b6214 <network_connecting>

000b6d40 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6d40:	6840      	ldr	r0, [r0, #4]
   b6d42:	2200      	movs	r2, #0
   b6d44:	2102      	movs	r1, #2
   b6d46:	f7ff ba6d 	b.w	b6224 <network_disconnect>

000b6d4a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6d4a:	2300      	movs	r3, #0
   b6d4c:	6840      	ldr	r0, [r0, #4]
   b6d4e:	461a      	mov	r2, r3
   b6d50:	f7ff ba58 	b.w	b6204 <network_connect>

000b6d54 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6d54:	4b02      	ldr	r3, [pc, #8]	; (b6d60 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6d56:	2204      	movs	r2, #4
   b6d58:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6d5a:	4a02      	ldr	r2, [pc, #8]	; (b6d64 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6d5c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b6d5e:	4770      	bx	lr
   b6d60:	2003e718 	.word	0x2003e718
   b6d64:	000b7efc 	.word	0x000b7efc

000b6d68 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6d68:	4b01      	ldr	r3, [pc, #4]	; (b6d70 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b6d6a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6d6c:	4770      	bx	lr
   b6d6e:	bf00      	nop
   b6d70:	2003e5d4 	.word	0x2003e5d4

000b6d74 <serialEventRun>:
{
   b6d74:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b6d76:	4b0b      	ldr	r3, [pc, #44]	; (b6da4 <serialEventRun+0x30>)
   b6d78:	b143      	cbz	r3, b6d8c <serialEventRun+0x18>
   b6d7a:	f7ff ff91 	bl	b6ca0 <_Z16_fetch_usbserialv>
   b6d7e:	6803      	ldr	r3, [r0, #0]
   b6d80:	691b      	ldr	r3, [r3, #16]
   b6d82:	4798      	blx	r3
   b6d84:	2800      	cmp	r0, #0
   b6d86:	dd01      	ble.n	b6d8c <serialEventRun+0x18>
        serialEvent();
   b6d88:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6d8c:	4b06      	ldr	r3, [pc, #24]	; (b6da8 <serialEventRun+0x34>)
   b6d8e:	b143      	cbz	r3, b6da2 <serialEventRun+0x2e>
   b6d90:	f000 f974 	bl	b707c <_Z22__fetch_global_Serial1v>
   b6d94:	6803      	ldr	r3, [r0, #0]
   b6d96:	691b      	ldr	r3, [r3, #16]
   b6d98:	4798      	blx	r3
   b6d9a:	2800      	cmp	r0, #0
   b6d9c:	dd01      	ble.n	b6da2 <serialEventRun+0x2e>
        serialEvent1();
   b6d9e:	f3af 8000 	nop.w
}
   b6da2:	bd08      	pop	{r3, pc}
	...

000b6dac <_post_loop>:
{
   b6dac:	b508      	push	{r3, lr}
	serialEventRun();
   b6dae:	f7ff ffe1 	bl	b6d74 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6db2:	f7ff f893 	bl	b5edc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6db6:	4b01      	ldr	r3, [pc, #4]	; (b6dbc <_post_loop+0x10>)
   b6db8:	6018      	str	r0, [r3, #0]
}
   b6dba:	bd08      	pop	{r3, pc}
   b6dbc:	2003e728 	.word	0x2003e728

000b6dc0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6dc0:	4805      	ldr	r0, [pc, #20]	; (b6dd8 <_Z33system_initialize_user_backup_ramv+0x18>)
   b6dc2:	4a06      	ldr	r2, [pc, #24]	; (b6ddc <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6dc4:	4906      	ldr	r1, [pc, #24]	; (b6de0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b6dc6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6dc8:	1a12      	subs	r2, r2, r0
   b6dca:	f000 f983 	bl	b70d4 <memcpy>
    __backup_sram_signature = signature;
   b6dce:	4b05      	ldr	r3, [pc, #20]	; (b6de4 <_Z33system_initialize_user_backup_ramv+0x24>)
   b6dd0:	4a05      	ldr	r2, [pc, #20]	; (b6de8 <_Z33system_initialize_user_backup_ramv+0x28>)
   b6dd2:	601a      	str	r2, [r3, #0]
}
   b6dd4:	bd08      	pop	{r3, pc}
   b6dd6:	bf00      	nop
   b6dd8:	2003f400 	.word	0x2003f400
   b6ddc:	2003f404 	.word	0x2003f404
   b6de0:	000b8058 	.word	0x000b8058
   b6de4:	2003f400 	.word	0x2003f400
   b6de8:	9a271c1e 	.word	0x9a271c1e

000b6dec <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6dec:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6dee:	2300      	movs	r3, #0
   b6df0:	9300      	str	r3, [sp, #0]
   b6df2:	461a      	mov	r2, r3
   b6df4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6df8:	f7ff f9f2 	bl	b61e0 <system_ctrl_set_result>
}
   b6dfc:	b003      	add	sp, #12
   b6dfe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6e04 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6e04:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b6e06:	8843      	ldrh	r3, [r0, #2]
   b6e08:	2b0a      	cmp	r3, #10
   b6e0a:	d008      	beq.n	b6e1e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6e0c:	2b50      	cmp	r3, #80	; 0x50
   b6e0e:	d10b      	bne.n	b6e28 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6e10:	4b09      	ldr	r3, [pc, #36]	; (b6e38 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b6e12:	681b      	ldr	r3, [r3, #0]
   b6e14:	b14b      	cbz	r3, b6e2a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b6e16:	b003      	add	sp, #12
   b6e18:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6e1c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b6e1e:	f7ff ffe5 	bl	b6dec <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b6e22:	b003      	add	sp, #12
   b6e24:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6e28:	2300      	movs	r3, #0
   b6e2a:	9300      	str	r3, [sp, #0]
   b6e2c:	461a      	mov	r2, r3
   b6e2e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6e32:	f7ff f9d5 	bl	b61e0 <system_ctrl_set_result>
}
   b6e36:	e7f4      	b.n	b6e22 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6e38:	2003e724 	.word	0x2003e724

000b6e3c <module_user_init_hook>:
{
   b6e3c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6e3e:	4812      	ldr	r0, [pc, #72]	; (b6e88 <module_user_init_hook+0x4c>)
   b6e40:	2100      	movs	r1, #0
   b6e42:	f7ff fa5f 	bl	b6304 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b6e46:	4b11      	ldr	r3, [pc, #68]	; (b6e8c <module_user_init_hook+0x50>)
   b6e48:	681a      	ldr	r2, [r3, #0]
   b6e4a:	4b11      	ldr	r3, [pc, #68]	; (b6e90 <module_user_init_hook+0x54>)
   b6e4c:	429a      	cmp	r2, r3
   b6e4e:	4b11      	ldr	r3, [pc, #68]	; (b6e94 <module_user_init_hook+0x58>)
   b6e50:	bf0c      	ite	eq
   b6e52:	2201      	moveq	r2, #1
   b6e54:	2200      	movne	r2, #0
   b6e56:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6e58:	d001      	beq.n	b6e5e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6e5a:	f7ff ffb1 	bl	b6dc0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b6e5e:	f7ff f82d 	bl	b5ebc <HAL_RNG_GetRandomNumber>
   b6e62:	4604      	mov	r4, r0
    srand(seed);
   b6e64:	f000 f94c 	bl	b7100 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6e68:	4b0b      	ldr	r3, [pc, #44]	; (b6e98 <module_user_init_hook+0x5c>)
   b6e6a:	b113      	cbz	r3, b6e72 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6e6c:	4620      	mov	r0, r4
   b6e6e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b6e72:	2100      	movs	r1, #0
   b6e74:	4808      	ldr	r0, [pc, #32]	; (b6e98 <module_user_init_hook+0x5c>)
   b6e76:	f7ff f9bd 	bl	b61f4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6e7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b6e7e:	4807      	ldr	r0, [pc, #28]	; (b6e9c <module_user_init_hook+0x60>)
   b6e80:	2100      	movs	r1, #0
   b6e82:	f7ff b9a3 	b.w	b61cc <system_ctrl_set_app_request_handler>
   b6e86:	bf00      	nop
   b6e88:	000b6d69 	.word	0x000b6d69
   b6e8c:	2003f400 	.word	0x2003f400
   b6e90:	9a271c1e 	.word	0x9a271c1e
   b6e94:	2003e720 	.word	0x2003e720
   b6e98:	00000000 	.word	0x00000000
   b6e9c:	000b6e05 	.word	0x000b6e05

000b6ea0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b6ea0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b6ea2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b6ea4:	d902      	bls.n	b6eac <pinAvailable+0xc>
    return false;
   b6ea6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b6ea8:	b002      	add	sp, #8
   b6eaa:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6eac:	f1a0 030b 	sub.w	r3, r0, #11
   b6eb0:	2b02      	cmp	r3, #2
   b6eb2:	d81a      	bhi.n	b6eea <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6eb4:	4c17      	ldr	r4, [pc, #92]	; (b6f14 <pinAvailable+0x74>)
   b6eb6:	7821      	ldrb	r1, [r4, #0]
   b6eb8:	f3bf 8f5b 	dmb	ish
   b6ebc:	f011 0101 	ands.w	r1, r1, #1
   b6ec0:	d10b      	bne.n	b6eda <pinAvailable+0x3a>
   b6ec2:	4620      	mov	r0, r4
   b6ec4:	9101      	str	r1, [sp, #4]
   b6ec6:	f7fd fdb3 	bl	b4a30 <__cxa_guard_acquire>
   b6eca:	9901      	ldr	r1, [sp, #4]
   b6ecc:	b128      	cbz	r0, b6eda <pinAvailable+0x3a>
   b6ece:	4812      	ldr	r0, [pc, #72]	; (b6f18 <pinAvailable+0x78>)
   b6ed0:	f7ff fd72 	bl	b69b8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6ed4:	4620      	mov	r0, r4
   b6ed6:	f7fd fdb0 	bl	b4a3a <__cxa_guard_release>
   b6eda:	4b0f      	ldr	r3, [pc, #60]	; (b6f18 <pinAvailable+0x78>)
   b6edc:	7818      	ldrb	r0, [r3, #0]
   b6ede:	f7ff f8bd 	bl	b605c <hal_spi_is_enabled>
   b6ee2:	2800      	cmp	r0, #0
   b6ee4:	d1df      	bne.n	b6ea6 <pinAvailable+0x6>
  return true; // 'pin' is available
   b6ee6:	2001      	movs	r0, #1
   b6ee8:	e7de      	b.n	b6ea8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b6eea:	2801      	cmp	r0, #1
   b6eec:	d809      	bhi.n	b6f02 <pinAvailable+0x62>
   b6eee:	f000 f885 	bl	b6ffc <_Z19__fetch_global_Wirev>
   b6ef2:	2100      	movs	r1, #0
   b6ef4:	7c00      	ldrb	r0, [r0, #16]
   b6ef6:	f7ff f871 	bl	b5fdc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6efa:	f080 0001 	eor.w	r0, r0, #1
   b6efe:	b2c0      	uxtb	r0, r0
   b6f00:	e7d2      	b.n	b6ea8 <pinAvailable+0x8>
   b6f02:	3809      	subs	r0, #9
   b6f04:	2801      	cmp	r0, #1
   b6f06:	d8ee      	bhi.n	b6ee6 <pinAvailable+0x46>
   b6f08:	f000 f8b8 	bl	b707c <_Z22__fetch_global_Serial1v>
   b6f0c:	7c00      	ldrb	r0, [r0, #16]
   b6f0e:	f7ff f8f5 	bl	b60fc <hal_usart_is_enabled>
   b6f12:	e7f2      	b.n	b6efa <pinAvailable+0x5a>
   b6f14:	2003e6b8 	.word	0x2003e6b8
   b6f18:	2003e6bc 	.word	0x2003e6bc

000b6f1c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6f1c:	2823      	cmp	r0, #35	; 0x23
{
   b6f1e:	b538      	push	{r3, r4, r5, lr}
   b6f20:	4604      	mov	r4, r0
   b6f22:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6f24:	d80a      	bhi.n	b6f3c <pinMode+0x20>
   b6f26:	29ff      	cmp	r1, #255	; 0xff
   b6f28:	d008      	beq.n	b6f3c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6f2a:	f7ff ffb9 	bl	b6ea0 <pinAvailable>
   b6f2e:	b128      	cbz	r0, b6f3c <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b6f30:	4629      	mov	r1, r5
   b6f32:	4620      	mov	r0, r4
}
   b6f34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b6f38:	f7fe bfe0 	b.w	b5efc <hal_gpio_mode>
}
   b6f3c:	bd38      	pop	{r3, r4, r5, pc}

000b6f3e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b6f3e:	b538      	push	{r3, r4, r5, lr}
   b6f40:	4604      	mov	r4, r0
   b6f42:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b6f44:	f7fe ffe2 	bl	b5f0c <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b6f48:	28ff      	cmp	r0, #255	; 0xff
   b6f4a:	d010      	beq.n	b6f6e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b6f4c:	2806      	cmp	r0, #6
   b6f4e:	d804      	bhi.n	b6f5a <digitalWrite+0x1c>
   b6f50:	234d      	movs	r3, #77	; 0x4d
   b6f52:	fa23 f000 	lsr.w	r0, r3, r0
   b6f56:	07c3      	lsls	r3, r0, #31
   b6f58:	d409      	bmi.n	b6f6e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b6f5a:	4620      	mov	r0, r4
   b6f5c:	f7ff ffa0 	bl	b6ea0 <pinAvailable>
   b6f60:	b128      	cbz	r0, b6f6e <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b6f62:	4629      	mov	r1, r5
   b6f64:	4620      	mov	r0, r4
}
   b6f66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b6f6a:	f7fe bfd7 	b.w	b5f1c <hal_gpio_write>
}
   b6f6e:	bd38      	pop	{r3, r4, r5, pc}

000b6f70 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b6f70:	b510      	push	{r4, lr}
   b6f72:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b6f74:	f7fe ffca 	bl	b5f0c <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b6f78:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b6f7a:	b2db      	uxtb	r3, r3
   b6f7c:	2b01      	cmp	r3, #1
   b6f7e:	d908      	bls.n	b6f92 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b6f80:	4620      	mov	r0, r4
   b6f82:	f7ff ff8d 	bl	b6ea0 <pinAvailable>
   b6f86:	b120      	cbz	r0, b6f92 <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b6f88:	4620      	mov	r0, r4
}
   b6f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b6f8e:	f7fe bfcd 	b.w	b5f2c <hal_gpio_read>
}
   b6f92:	2000      	movs	r0, #0
   b6f94:	bd10      	pop	{r4, pc}

000b6f96 <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b6f96:	280d      	cmp	r0, #13
{
   b6f98:	b510      	push	{r4, lr}
   b6f9a:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b6f9c:	bf9c      	itt	ls
   b6f9e:	340e      	addls	r4, #14
   b6fa0:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   b6fa2:	4620      	mov	r0, r4
   b6fa4:	f7ff ff7c 	bl	b6ea0 <pinAvailable>
   b6fa8:	b150      	cbz	r0, b6fc0 <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   b6faa:	2103      	movs	r1, #3
   b6fac:	4620      	mov	r0, r4
   b6fae:	f7fe ff9d 	bl	b5eec <hal_pin_validate_function>
   b6fb2:	2803      	cmp	r0, #3
   b6fb4:	d104      	bne.n	b6fc0 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b6fb6:	4620      	mov	r0, r4
}
   b6fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b6fbc:	f7fe bfbe 	b.w	b5f3c <hal_adc_read>
}
   b6fc0:	2000      	movs	r0, #0
   b6fc2:	bd10      	pop	{r4, pc}

000b6fc4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6fc4:	4770      	bx	lr
	...

000b6fc8 <_Z17acquireWireBufferv>:
{
   b6fc8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b6fca:	4b0a      	ldr	r3, [pc, #40]	; (b6ff4 <_Z17acquireWireBufferv+0x2c>)
   b6fcc:	6003      	str	r3, [r0, #0]
   b6fce:	2301      	movs	r3, #1
{
   b6fd0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b6fd2:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6fd4:	4908      	ldr	r1, [pc, #32]	; (b6ff8 <_Z17acquireWireBufferv+0x30>)
   b6fd6:	2020      	movs	r0, #32
   b6fd8:	f000 f874 	bl	b70c4 <_ZnajRKSt9nothrow_t>
	};
   b6fdc:	2520      	movs	r5, #32
   b6fde:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6fe0:	4905      	ldr	r1, [pc, #20]	; (b6ff8 <_Z17acquireWireBufferv+0x30>)
	};
   b6fe2:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6fe4:	4628      	mov	r0, r5
   b6fe6:	f000 f86d 	bl	b70c4 <_ZnajRKSt9nothrow_t>
	};
   b6fea:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b6fee:	4620      	mov	r0, r4
   b6ff0:	bd38      	pop	{r3, r4, r5, pc}
   b6ff2:	bf00      	nop
   b6ff4:	00010018 	.word	0x00010018
   b6ff8:	000b7f30 	.word	0x000b7f30

000b6ffc <_Z19__fetch_global_Wirev>:
{
   b6ffc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6ffe:	4d0e      	ldr	r5, [pc, #56]	; (b7038 <_Z19__fetch_global_Wirev+0x3c>)
   b7000:	7829      	ldrb	r1, [r5, #0]
   b7002:	f3bf 8f5b 	dmb	ish
   b7006:	f011 0401 	ands.w	r4, r1, #1
{
   b700a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b700c:	d111      	bne.n	b7032 <_Z19__fetch_global_Wirev+0x36>
   b700e:	4628      	mov	r0, r5
   b7010:	f7fd fd0e 	bl	b4a30 <__cxa_guard_acquire>
   b7014:	b168      	cbz	r0, b7032 <_Z19__fetch_global_Wirev+0x36>
   b7016:	4668      	mov	r0, sp
   b7018:	f7ff ffd6 	bl	b6fc8 <_Z17acquireWireBufferv>
   b701c:	466a      	mov	r2, sp
   b701e:	4621      	mov	r1, r4
   b7020:	4806      	ldr	r0, [pc, #24]	; (b703c <_Z19__fetch_global_Wirev+0x40>)
   b7022:	f7ff f9ed 	bl	b6400 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7026:	4628      	mov	r0, r5
   b7028:	f7fd fd07 	bl	b4a3a <__cxa_guard_release>
   b702c:	4804      	ldr	r0, [pc, #16]	; (b7040 <_Z19__fetch_global_Wirev+0x44>)
   b702e:	f000 f84b 	bl	b70c8 <atexit>
	return wire;
}
   b7032:	4802      	ldr	r0, [pc, #8]	; (b703c <_Z19__fetch_global_Wirev+0x40>)
   b7034:	b007      	add	sp, #28
   b7036:	bd30      	pop	{r4, r5, pc}
   b7038:	2003e72c 	.word	0x2003e72c
   b703c:	2003e730 	.word	0x2003e730
   b7040:	000b6fc5 	.word	0x000b6fc5

000b7044 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7044:	4770      	bx	lr
	...

000b7048 <_Z20acquireSerial1Bufferv>:
{
   b7048:	b538      	push	{r3, r4, r5, lr}
   b704a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b704c:	2514      	movs	r5, #20
   b704e:	462a      	mov	r2, r5
   b7050:	2100      	movs	r1, #0
   b7052:	f000 f84d 	bl	b70f0 <memset>
   b7056:	8025      	strh	r5, [r4, #0]
   b7058:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b705a:	4907      	ldr	r1, [pc, #28]	; (b7078 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b705c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b705e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7060:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7062:	f000 f82f 	bl	b70c4 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7066:	4904      	ldr	r1, [pc, #16]	; (b7078 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7068:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b706a:	4628      	mov	r0, r5
   b706c:	f000 f82a 	bl	b70c4 <_ZnajRKSt9nothrow_t>
    };
   b7070:	60e0      	str	r0, [r4, #12]
}
   b7072:	4620      	mov	r0, r4
   b7074:	bd38      	pop	{r3, r4, r5, pc}
   b7076:	bf00      	nop
   b7078:	000b7f30 	.word	0x000b7f30

000b707c <_Z22__fetch_global_Serial1v>:
{
   b707c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b707e:	4d0e      	ldr	r5, [pc, #56]	; (b70b8 <_Z22__fetch_global_Serial1v+0x3c>)
   b7080:	7829      	ldrb	r1, [r5, #0]
   b7082:	f3bf 8f5b 	dmb	ish
   b7086:	f011 0401 	ands.w	r4, r1, #1
{
   b708a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b708c:	d111      	bne.n	b70b2 <_Z22__fetch_global_Serial1v+0x36>
   b708e:	4628      	mov	r0, r5
   b7090:	f7fd fcce 	bl	b4a30 <__cxa_guard_acquire>
   b7094:	b168      	cbz	r0, b70b2 <_Z22__fetch_global_Serial1v+0x36>
   b7096:	a801      	add	r0, sp, #4
   b7098:	f7ff ffd6 	bl	b7048 <_Z20acquireSerial1Bufferv>
   b709c:	aa01      	add	r2, sp, #4
   b709e:	4621      	mov	r1, r4
   b70a0:	4806      	ldr	r0, [pc, #24]	; (b70bc <_Z22__fetch_global_Serial1v+0x40>)
   b70a2:	f7ff fd8f 	bl	b6bc4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b70a6:	4628      	mov	r0, r5
   b70a8:	f7fd fcc7 	bl	b4a3a <__cxa_guard_release>
   b70ac:	4804      	ldr	r0, [pc, #16]	; (b70c0 <_Z22__fetch_global_Serial1v+0x44>)
   b70ae:	f000 f80b 	bl	b70c8 <atexit>
    return serial1;
}
   b70b2:	4802      	ldr	r0, [pc, #8]	; (b70bc <_Z22__fetch_global_Serial1v+0x40>)
   b70b4:	b007      	add	sp, #28
   b70b6:	bd30      	pop	{r4, r5, pc}
   b70b8:	2003e744 	.word	0x2003e744
   b70bc:	2003e748 	.word	0x2003e748
   b70c0:	000b7045 	.word	0x000b7045

000b70c4 <_ZnajRKSt9nothrow_t>:
   b70c4:	f7fd bca3 	b.w	b4a0e <_Znaj>

000b70c8 <atexit>:
   b70c8:	2300      	movs	r3, #0
   b70ca:	4601      	mov	r1, r0
   b70cc:	461a      	mov	r2, r3
   b70ce:	4618      	mov	r0, r3
   b70d0:	f000 b844 	b.w	b715c <__register_exitproc>

000b70d4 <memcpy>:
   b70d4:	440a      	add	r2, r1
   b70d6:	4291      	cmp	r1, r2
   b70d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b70dc:	d100      	bne.n	b70e0 <memcpy+0xc>
   b70de:	4770      	bx	lr
   b70e0:	b510      	push	{r4, lr}
   b70e2:	f811 4b01 	ldrb.w	r4, [r1], #1
   b70e6:	f803 4f01 	strb.w	r4, [r3, #1]!
   b70ea:	4291      	cmp	r1, r2
   b70ec:	d1f9      	bne.n	b70e2 <memcpy+0xe>
   b70ee:	bd10      	pop	{r4, pc}

000b70f0 <memset>:
   b70f0:	4402      	add	r2, r0
   b70f2:	4603      	mov	r3, r0
   b70f4:	4293      	cmp	r3, r2
   b70f6:	d100      	bne.n	b70fa <memset+0xa>
   b70f8:	4770      	bx	lr
   b70fa:	f803 1b01 	strb.w	r1, [r3], #1
   b70fe:	e7f9      	b.n	b70f4 <memset+0x4>

000b7100 <srand>:
   b7100:	b538      	push	{r3, r4, r5, lr}
   b7102:	4b10      	ldr	r3, [pc, #64]	; (b7144 <srand+0x44>)
   b7104:	681d      	ldr	r5, [r3, #0]
   b7106:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7108:	4604      	mov	r4, r0
   b710a:	b9b3      	cbnz	r3, b713a <srand+0x3a>
   b710c:	2018      	movs	r0, #24
   b710e:	f7ff f8d9 	bl	b62c4 <malloc>
   b7112:	4602      	mov	r2, r0
   b7114:	63a8      	str	r0, [r5, #56]	; 0x38
   b7116:	b920      	cbnz	r0, b7122 <srand+0x22>
   b7118:	4b0b      	ldr	r3, [pc, #44]	; (b7148 <srand+0x48>)
   b711a:	480c      	ldr	r0, [pc, #48]	; (b714c <srand+0x4c>)
   b711c:	2142      	movs	r1, #66	; 0x42
   b711e:	f7ff f8e9 	bl	b62f4 <__assert_func>
   b7122:	490b      	ldr	r1, [pc, #44]	; (b7150 <srand+0x50>)
   b7124:	4b0b      	ldr	r3, [pc, #44]	; (b7154 <srand+0x54>)
   b7126:	e9c0 1300 	strd	r1, r3, [r0]
   b712a:	4b0b      	ldr	r3, [pc, #44]	; (b7158 <srand+0x58>)
   b712c:	6083      	str	r3, [r0, #8]
   b712e:	230b      	movs	r3, #11
   b7130:	8183      	strh	r3, [r0, #12]
   b7132:	2100      	movs	r1, #0
   b7134:	2001      	movs	r0, #1
   b7136:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b713a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b713c:	2200      	movs	r2, #0
   b713e:	611c      	str	r4, [r3, #16]
   b7140:	615a      	str	r2, [r3, #20]
   b7142:	bd38      	pop	{r3, r4, r5, pc}
   b7144:	2003e5d4 	.word	0x2003e5d4
   b7148:	000b7f31 	.word	0x000b7f31
   b714c:	000b7f48 	.word	0x000b7f48
   b7150:	abcd330e 	.word	0xabcd330e
   b7154:	e66d1234 	.word	0xe66d1234
   b7158:	0005deec 	.word	0x0005deec

000b715c <__register_exitproc>:
   b715c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7160:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b721c <__register_exitproc+0xc0>
   b7164:	4606      	mov	r6, r0
   b7166:	f8d8 0000 	ldr.w	r0, [r8]
   b716a:	461f      	mov	r7, r3
   b716c:	460d      	mov	r5, r1
   b716e:	4691      	mov	r9, r2
   b7170:	f000 f856 	bl	b7220 <__retarget_lock_acquire_recursive>
   b7174:	4b25      	ldr	r3, [pc, #148]	; (b720c <__register_exitproc+0xb0>)
   b7176:	681c      	ldr	r4, [r3, #0]
   b7178:	b934      	cbnz	r4, b7188 <__register_exitproc+0x2c>
   b717a:	4c25      	ldr	r4, [pc, #148]	; (b7210 <__register_exitproc+0xb4>)
   b717c:	601c      	str	r4, [r3, #0]
   b717e:	4b25      	ldr	r3, [pc, #148]	; (b7214 <__register_exitproc+0xb8>)
   b7180:	b113      	cbz	r3, b7188 <__register_exitproc+0x2c>
   b7182:	681b      	ldr	r3, [r3, #0]
   b7184:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7188:	6863      	ldr	r3, [r4, #4]
   b718a:	2b1f      	cmp	r3, #31
   b718c:	dd07      	ble.n	b719e <__register_exitproc+0x42>
   b718e:	f8d8 0000 	ldr.w	r0, [r8]
   b7192:	f000 f847 	bl	b7224 <__retarget_lock_release_recursive>
   b7196:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b719a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b719e:	b34e      	cbz	r6, b71f4 <__register_exitproc+0x98>
   b71a0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b71a4:	b988      	cbnz	r0, b71ca <__register_exitproc+0x6e>
   b71a6:	4b1c      	ldr	r3, [pc, #112]	; (b7218 <__register_exitproc+0xbc>)
   b71a8:	b923      	cbnz	r3, b71b4 <__register_exitproc+0x58>
   b71aa:	f8d8 0000 	ldr.w	r0, [r8]
   b71ae:	f000 f838 	bl	b7222 <__retarget_lock_release>
   b71b2:	e7f0      	b.n	b7196 <__register_exitproc+0x3a>
   b71b4:	f44f 7084 	mov.w	r0, #264	; 0x108
   b71b8:	f7ff f884 	bl	b62c4 <malloc>
   b71bc:	2800      	cmp	r0, #0
   b71be:	d0f4      	beq.n	b71aa <__register_exitproc+0x4e>
   b71c0:	2300      	movs	r3, #0
   b71c2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b71c6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b71ca:	6863      	ldr	r3, [r4, #4]
   b71cc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b71d0:	2201      	movs	r2, #1
   b71d2:	409a      	lsls	r2, r3
   b71d4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b71d8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b71dc:	4313      	orrs	r3, r2
   b71de:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b71e2:	2e02      	cmp	r6, #2
   b71e4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b71e8:	bf02      	ittt	eq
   b71ea:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b71ee:	4313      	orreq	r3, r2
   b71f0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b71f4:	6863      	ldr	r3, [r4, #4]
   b71f6:	f8d8 0000 	ldr.w	r0, [r8]
   b71fa:	1c5a      	adds	r2, r3, #1
   b71fc:	3302      	adds	r3, #2
   b71fe:	6062      	str	r2, [r4, #4]
   b7200:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7204:	f000 f80e 	bl	b7224 <__retarget_lock_release_recursive>
   b7208:	2000      	movs	r0, #0
   b720a:	e7c6      	b.n	b719a <__register_exitproc+0x3e>
   b720c:	2003e7e8 	.word	0x2003e7e8
   b7210:	2003e75c 	.word	0x2003e75c
   b7214:	00000000 	.word	0x00000000
   b7218:	000b62c5 	.word	0x000b62c5
   b721c:	2003e638 	.word	0x2003e638

000b7220 <__retarget_lock_acquire_recursive>:
   b7220:	4770      	bx	lr

000b7222 <__retarget_lock_release>:
   b7222:	4770      	bx	lr

000b7224 <__retarget_lock_release_recursive>:
   b7224:	4770      	bx	lr

000b7226 <link_code_end>:
	...

000b7228 <dynalib_user>:
   b7228:	4999 000b 49d5 000b 49fd 000b 4a01 000b     .I...I...I...J..
   b7238:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b7248:	7620 7269 7574 6c61 6400 6765 6572 7365      virtual.degrees
   b7258:	6320 6c65 6973 7375 6400 6765 6572 7365      celsius.degrees
   b7268:	6600 7261 6e65 6568 7469                     .farenheit.

000b7273 <_ZL4font>:
   b7273:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b7283:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b7293:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b72a3:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b72b3:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b72c3:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b72d3:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b72e3:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b72f3:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b7303:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b7313:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b7323:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b7333:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b7343:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b7353:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b7363:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b7373:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b7383:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b7393:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b73a3:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b73b3:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b73c3:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b73d3:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b73e3:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b73f3:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b7403:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b7413:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b7423:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b7433:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b7443:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b7453:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b7463:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b7473:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b7483:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b7493:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b74a3:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b74b3:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b74c3:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b74d3:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b74e3:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b74f3:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b7503:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   b7513:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b7523:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b7533:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   b7543:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b7553:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   b7563:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   b7573:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   b7583:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b7593:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b75a3:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b75b3:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b75c3:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b75d3:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b75e3:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   b75f3:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   b7603:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   b7613:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   b7623:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   b7633:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   b7643:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   b7653:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   b7663:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   b7673:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   b7683:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   b7693:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   b76a3:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   b76b3:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   b76c3:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   b76d3:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   b76e3:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   b76f3:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   b7703:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   b7713:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   b7723:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   b7733:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   b7743:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   b7753:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   b7763:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
	...

000b7774 <_ZTV12Adafruit_GFX>:
	...
   b7784:	5251 000b 66d1 000b 4a19 000b 4c57 000b     QR...f...J..WL..
   b7794:	4c59 000b 4c8b 000b 4c67 000b 4c79 000b     YL...L..gL..yL..
   b77a4:	4b99 000b 4c57 000b 4e83 000b 4e81 000b     .K..WL...N...N..
   b77b4:	4ca3 000b 4ce1 000b 4d1b 000b 4d61 000b     .L...L...M..aM..
   b77c4:	4d7d 000b 4e01 000b 6564 6166 6c75 2074     }M...N..default 
   b77d4:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   b77e4:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   b77f4:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
   b7804:	2520 2073 4f4d 4544 7525 003e                %s MODE%u>.

000b7810 <_ZTVN8particle11SPISettingsE>:
	...
   b7818:	538d 000b 535f 000b 5361 000b               .S.._S..aS..

000b7824 <_ZL12splash1_data>:
   b7824:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   b7834:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   b7844:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   b7854:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   b7864:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   b7874:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   b788c:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   b789c:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   b78ac:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   b78bc:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   b78cc:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   b78dc:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   b78ec:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   b78fc:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   b790c:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   b791c:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   b792c:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   b793c:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   b794c:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   b795c:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   b796c:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   b797c:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   b798c:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   b799c:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   b79b4:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   b79cc:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   b79dc:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   b79ec:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   b79fc:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   b7a0c:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   b7a1c:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   b7a2c:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   b7a3c:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   b7a4c:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   b7a5c:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   b7a6c:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   b7a7c:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   b7a8c:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   b7a9c:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   b7aac:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   b7abc:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   b7acc:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   b7adc:	fdff 5b6b 6adb c0fd                         ..k[.j..

000b7ae4 <_ZL12splash2_data>:
   b7ae4:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   b7af4:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   b7b04:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   b7b20:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   b7b30:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   b7b40:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   b7b50:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   b7b60:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   b7b70:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   b7b80:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   b7b90:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   b7ba0:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   b7bb0:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   b7bc0:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   b7bd0:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   b7be0:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   b7bf0:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   b7c00:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   b7c10:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   b7c20:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   b7c30:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   b7c40:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   b7c50:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   b7c60:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   b7c78:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   b7c88:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   b7c98:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   b7ca8:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   b7cb8:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000b7cc4 <_ZTV16Adafruit_SSD1306>:
	...
   b7ccc:	53e1 000b 53f9 000b 5251 000b 66d1 000b     .S...S..QR...f..
   b7cdc:	540d 000b 4c57 000b 4c59 000b 4c8b 000b     .T..WL..YL...L..
   b7cec:	4c67 000b 4c79 000b 4b99 000b 4c57 000b     gL..yL...K..WL..
   b7cfc:	4e83 000b 55ab 000b 5b53 000b 5b05 000b     .N...U..S[...[..
   b7d0c:	4d1b 000b 4d61 000b 4d7d 000b 4e01 000b     .M..aM..}M...N..

000b7d1c <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   b7d1c:	8000 e0c0 f8f0 fefc                         ........

000b7d24 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   b7d24:	0100 0703 1f0f 7f3f                         ......?.

000b7d2c <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   b7d2c:	d5ae a880                                   ....

000b7d30 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   b7d30:	00d3 8d40                                   ..@.

000b7d34 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   b7d34:	0020 c8a1                                    ...

000b7d38 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   b7d38:	40db a6a4 af2e                              .@....

000b7d3e <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   b7d3e:	02da 8f81                                   ....

000b7d42 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   b7d42:	12da                                         ...

000b7d45 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   b7d45:	02da                                         ...

000b7d48 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   b7d48:	0022 21ff 0000 0000                         "..!....

000b7d50 <_ZTV16OledWingAdafruit>:
	...
   b7d58:	5d79 000b 5d99 000b 5251 000b 66d1 000b     y]...]..QR...f..
   b7d68:	540d 000b 4c57 000b 4c59 000b 4c8b 000b     .T..WL..YL...L..
   b7d78:	4c67 000b 4c79 000b 4b99 000b 4c57 000b     gL..yL...K..WL..
   b7d88:	4e83 000b 55ab 000b 5b53 000b 5b05 000b     .N...U..S[...[..
   b7d98:	4d1b 000b 4d61 000b 4d7d 000b 4e01 000b     .M..aM..}M...N..

000b7da8 <_ZTVN5spark13EthernetClassE>:
	...
   b7db0:	638b 000b 6381 000b 6377 000b 636d 000b     .c...c..wc..mc..
   b7dc0:	6361 000b 6355 000b 65ad 000b 65b5 000b     ac..Uc...e...e..
   b7dd0:	6349 000b 6341 000b 6337 000b 632d 000b     Ic..Ac..7c..-c..
   b7de0:	65e5 000b                                   .e..

000b7de4 <_ZTV7TwoWire>:
	...
   b7dec:	63a9 000b 63f3 000b 63cb 000b 63ab 000b     .c...c...c...c..
   b7dfc:	63d3 000b 63db 000b 63e3 000b 63eb 000b     .c...c...c...c..

000b7e0c <_ZTV9IPAddress>:
	...
   b7e14:	647d 000b 646d 000b 646f 000b 7061 0070     }d..md..od..app.

000b7e24 <_ZTVN5spark12NetworkClassE>:
	...
   b7e2c:	656d 000b 6577 000b 6581 000b 658b 000b     me..we...e...e..
   b7e3c:	6595 000b 65a1 000b 65ad 000b 65b5 000b     .e...e...e...e..
   b7e4c:	65bd 000b 65c9 000b 65d1 000b 65db 000b     .e...e...e...e..
   b7e5c:	65e5 000b 616e 006e 6e69 0066 766f 0066     .e..nan.inf.ovf.
   b7e6c:	002e                                        ..

000b7e6e <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b7e6e:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   b7e7e:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b7e8e:	6d69 0065 0000                              ime...

000b7e94 <_ZTV11USARTSerial>:
	...
   b7e9c:	6b49 000b 6bb5 000b 6b8d 000b 66d1 000b     Ik...k...k...f..
   b7eac:	6b5d 000b 6b79 000b 6b6b 000b 6b87 000b     ]k..yk..kk...k..
   b7ebc:	6b4b 000b 6b4f 000b                         Kk..Ok..

000b7ec4 <_ZTV9USBSerial>:
	...
   b7ecc:	6bf3 000b 6c5b 000b 6c31 000b 66d1 000b     .k..[l..1l...f..
   b7edc:	6c23 000b 6bf5 000b 6c05 000b 6c55 000b     #l...k...l..Ul..
   b7eec:	6c15 000b 6bed 000b                         .l...k..

000b7ef4 <_ZTVN5spark9WiFiClassE>:
	...
   b7efc:	6d4b 000b 6d41 000b 6d37 000b 6ced 000b     Km..Am..7m...l..
   b7f0c:	6d2b 000b 6d1f 000b 65ad 000b 65b5 000b     +m...m...e...e..
   b7f1c:	6d13 000b 6d0b 000b 6d01 000b 6cf7 000b     .m...m...m...l..
   b7f2c:	65e5 000b                                   .e..

000b7f30 <_ZSt7nothrow>:
   b7f30:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b7f40:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b7f50:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b7f60:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b7f70:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b7f80:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b7f90:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b7fa1 <link_const_data_end>:
   b7fa1:	00          	.byte	0x00
	...

000b7fa4 <link_constructors_location>:
   b7fa4:	000b4b65 	.word	0x000b4b65
   b7fa8:	000b631d 	.word	0x000b631d
   b7fac:	000b6395 	.word	0x000b6395
   b7fb0:	000b655d 	.word	0x000b655d
   b7fb4:	000b66bd 	.word	0x000b66bd
   b7fb8:	000b69a1 	.word	0x000b69a1
   b7fbc:	000b6b11 	.word	0x000b6b11
   b7fc0:	000b6b35 	.word	0x000b6b35
   b7fc4:	000b6d55 	.word	0x000b6d55
